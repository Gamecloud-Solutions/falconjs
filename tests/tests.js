
/*
	Falcon.js
	by Rick Allen (stoodder)

	Version 0.0.2
	Full source at https://github.com/stoodder/falconjs
	Copyright (c) 2011 RokkinCat, http://www.rokkincat.com

	MIT License, https://github.com/stoodder/falconjs/blob/master/LICENSE.md
	This file is generated by `cake build`, do not edit it by hand.
*/

(function() {
  var Falcon, arrayContains, arrayPeek, arrayRemove, arrayUnique, arraysEqual, compact, countSubstrings, defer, delay, endsWith, extend, isArray, isBoolean, isEmpty, isFunction, isNumber, isObject, isString, key, objectKeys, objectValues, objectsEqual, startsWith, trim, trimSlashes, value, _foreach,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __slice = Array.prototype.slice;

  isObject = function(object) {
    return (typeof object) === (typeof {}) && object !== null;
  };

  isFunction = function(object) {
    return Object.prototype.toString.call(object) === "[object Function]";
  };

  isBoolean = function(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  };

  isArray = function(object) {
    return Object.prototype.toString.call(object) === "[object Array]";
  };

  isString = function(object) {
    return Object.prototype.toString.call(object) === "[object String]";
  };

  isNumber = function(object) {
    return Object.prototype.toString.call(object) === "[object Number]";
  };

  isEmpty = function(object) {
    var key, value;
    if (isObject(object)) {
      for (key in object) {
        value = object[key];
        return false;
      }
      return true;
    } else if (isString(object) || isArray(object)) {
      return object.length === 0;
    } else if (object === null || typeof object === "undefined") {
      return true;
    }
    return false;
  };

  trim = function(str) {
    return str.replace(/^\s+/, '').replace(/\s+$/, '');
  };

  trimSlashes = function(str) {
    return str.replace(/^\//, '').replace(/\/$/, '');
  };

  startsWith = function(haystack, needle) {
    return haystack.indexOf(needle) === 0;
  };

  endsWith = function(haystack, needle) {
    return haystack.indexOf(needle, haystack.length - needle.length) !== -1;
  };

  countSubstrings = function(str, substr) {
    return str.split(substr).length - 1;
  };

  objectKeys = function(obj) {
    var key, _results;
    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  };

  objectValues = function(obj) {
    var key, value, _results;
    _results = [];
    for (key in obj) {
      value = obj[key];
      _results.push(value);
    }
    return _results;
  };

  objectsEqual = function(obj1, obj2) {
    var key, value;
    for (key in obj1) {
      value = obj1[key];
      if (obj2[key] !== value) return false;
    }
    for (key in obj2) {
      value = obj2[key];
      if (obj1[key] !== value) return false;
    }
    return true;
  };

  compact = function(obj) {
    var key, newObj, value;
    if (!isObject(obj)) obj = {};
    newObj = {};
    for (key in obj) {
      value = obj[key];
      if (value != null) newObj[key] = value;
    }
    return newObj;
  };

  extend = function(obj, extender) {
    var key, value;
    if (obj == null) obj = {};
    if (!isObject(extender)) extender = {};
    for (key in extender) {
      value = extender[key];
      obj[key] = value;
    }
    return obj;
  };

  arraysEqual = function(arr1, arr2) {
    var index, value, _len;
    if (arr1.length !== arr2.length) return false;
    for (index = 0, _len = arr1.length; index < _len; index++) {
      value = arr1[index];
      if (arr2[index] !== value) return false;
    }
    return true;
  };

  arrayPeek = function(arr) {
    return arr[arr.length - 1];
  };

  arrayContains = function(haystack, needle) {
    var hay, _i, _len;
    if (isFunction(haystack.indexOf)) {
      return haystack.indexOf(needle) !== -1;
    } else if (isArray(haystack)) {
      for (_i = 0, _len = haystack.length; _i < _len; _i++) {
        hay = haystack[_i];
        if (hay === needle) return true;
      }
    }
    return false;
  };

  arrayUnique = function(arr) {
    var key, obj, value, _i, _len;
    obj = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      key = arr[_i];
      obj[key] = true;
    }
    return (function() {
      var _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        _results.push(key);
      }
      return _results;
    })();
  };

  arrayRemove = function(arr, items) {
    var item, _i, _item, _len;
    if (!isArray(arr)) return [];
    if (!isArray(items)) items = [items];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      arr = (function() {
        var _j, _len2, _results;
        _results = [];
        for (_j = 0, _len2 = arr.length; _j < _len2; _j++) {
          _item = arr[_j];
          if (_item !== item) _results.push(_item);
        }
        return _results;
      })();
    }
    return arr;
  };

  delay = function(time, callback) {
    var _ref;
    if (isFunction(time)) {
      _ref = [callback, time], time = _ref[0], callback = _ref[1];
    }
    if (!isNumber(time)) time = 1;
    if (!isFunction(callback)) callback = (function() {});
    if (time < 1) time = 1;
    return setTimeout(callback, time);
  };

  defer = function(callback) {
    if (!isFunction(callback)) callback = (function() {});
    return setTimeout(callback, 1);
  };

  Falcon = {
    version: "0.0.2",
    baseApiUrl: "",
    apply: function(view) {
      return $(function() {
        $('body').attr('data-bind', 'view: $data');
        return ko.applyBindings(view);
      });
    },
    isModel: function(object) {
      object = ko.utils.unwrapObservable(object);
      return (object != null) && object instanceof Falcon.Model;
    },
    isCollection: function(object) {
      object = ko.utils.unwrapObservable(object);
      return (object != null) && object instanceof Falcon.Collection;
    },
    isView: function(object) {
      object = ko.utils.unwrapObservable(object);
      return (object != null) && object instanceof Falcon.View;
    },
    isDataObject: function(object) {
      object = ko.utils.unwrapObservable(object);
      return (object != null) && (object instanceof Falcon.Model || object instanceof Falcon.Collection);
    }
  };

  this.Falcon = Falcon;

  Falcon.Class = (function() {

    function Class() {}

    Class.prototype["super"] = function() {};

    Class.extend = function(parent, definition) {
      var child, ctor;
      if (parent == null) parent = Falcon.Class;
      child = null;
      if ((definition != null) && definition.hasOwnProperty("constructor")) {
        child = definition.constructor;
      } else {
        child = function() {
          return this.__super__.apply(this, arguments);
        };
      }
      ctor = (function() {});
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.prototype.__super__ = function() {
        return parent.apply(this, arguments);
      };
      child.extend = function(definition) {
        return Falcon.Class.extend(child, definition);
      };
      extend(child.prototype, definition != null ? definition : {});
      return child;
    };

    return Class;

  })();

  Falcon.Model = (function(_super) {

    __extends(Model, _super);

    Model.extend = function(properties) {
      return Falcon.Class.extend(Falcon.Model, properties);
    };

    Model.prototype.url = null;

    Model.prototype.parent = null;

    Model.prototype.fields = null;

    Model.prototype._events = null;

    /*
    	# Method: Falcon.Class()
    	#	The constructor for a model
    	#
    	# Arguments:
    	#	**data** _(object)_ - The initial data to load in
    	#	**parent** _(mixed)_ - The parent object of this one
    */

    function Model(data, parent) {
      var field, _i, _len, _ref, _ref2;
      data = ko.utils.unwrapObservable(data);
      parent = ko.utils.unwrapObservable(parent);
      if (Falcon.isModel(data) && !(parent != null)) {
        _ref = [data, parent], parent = _ref[0], data = _ref[1];
      }
      this._events = {};
      this.id = ko.observable();
      this.parent = ko.utils.unwrapObservable(parent);
      if (this.fields === null) this.fields = [];
      this.initialize(data);
      this.fill(data);
      _ref2 = this.fields;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        field = _ref2[_i];
        if (!this[field] && isString(field)) this[field] = ko.observable();
      }
    }

    Model.prototype.initialize = (function() {});

    /*
    	# Method: Falcon.Model#fill
    	#	Method used to 'fill in' and add data to this model
    */

    Model.prototype.fill = function(data) {
      var key, value;
      if (!isObject(data)) return this;
      for (key in data) {
        value = data[key];
        if (!(key in Falcon.Model.prototype)) {
          if (!(this[key] != null)) {
            if (!(ko.isObservable(value) || Falcon.isDataObject(value))) {
              if (isArray(value)) {
                value = ko.observableArray(value);
              } else {
                value = ko.observable(value);
              }
            }
            this[key] = value;
          } else if (Falcon.isDataObject(this[key])) {
            this[key].fill(value);
          } else if (ko.isObservable(this[key])) {
            this[key](value);
          } else {
            this[key] = value;
          }
        }
      }
      return this;
    };

    /*
    	# Method: Falcon.Model#unwrap
    	#	Method used to 'unwrap' this object into an anonmous object
    	#	Needed to cascade inwards on other Falcon Data objects (like lists)
    	#	to unwrap newly added member variables/objects
    	#
    	# Returns
    	#	_Object_ - The 'unwrapped' object
    */

    Model.prototype.unwrap = function() {
      var key, keys, raw, value, _i, _len;
      raw = {};
      keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      keys[keys.length] = "id";
      keys = arrayUnique(keys);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        value = this[key];
        raw[key] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    /*
    	# Method: Falon.Model#serialize
    	#	Serializes the data into a raw json object and only corresponds to the fields
    	#	that are primitive and that we wish to be able to send back to the server
    */

    Model.prototype.serialize = function() {
      var key, keys, raw, value, _i, _len;
      raw = {};
      if (isArray(this.fields) && this.fields.length > 0) {
        keys = this.fields;
      } else {
        keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      }
      keys[keys.length] = "id";
      keys = arrayUnique(keys);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        value = this[key];
        if (Falcon.isDataObject(value)) {
          raw[key] = value.serialize();
        } else if (ko.isObservable(value)) {
          raw[key] = ko.utils.unwrapObservable(value);
        } else if (!isFunction(value)) {
          raw[key] = value;
        }
      }
      return raw;
    };

    /*
    	# Method: Falcon.Model#makeURL
    	#	generates a URL based on this model's url, the parent model of this model, 
    	#	the type of request we're making and Falcon's defined baseModel
    	#
    	# Arguments:
    	#	**type** _(string)_ - The type of request we're making (GET, POST, PUT, DELETE)
    	#
    	# Returns:
    	#	_String_ - The generated URL
    */

    Model.prototype.makeUrl = function(type) {
      var ext, parentPeriodIndex, parentUrl, periodIndex, url;
      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) url = "";
      url = trim(url);
      if (!isString(type)) type = "";
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      ext = "";
      periodIndex = url.lastIndexOf(".");
      if (periodIndex > -1) {
        ext = url.slice(periodIndex);
        url = url.slice(0, periodIndex);
      }
      if (!startsWith(url, "/")) url = "/" + url;
      if (Falcon.isModel(this.parent)) {
        parentUrl = this.parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        if (parentPeriodIndex > -1) {
          parentUrl = parentUrl.slice(0, parentPeriodIndex);
        }
        parentUrl = trim(parentUrl);
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      if (type === "GET" || type === "PUT" || type === "DELETE") {
        if (url.slice(-1) !== "/") url += "/";
        url += this.id();
      }
      return "" + url + ext;
    };

    /*
    	#
    */

    Model.prototype.sync = function(type, options) {
      var data, url,
        _this = this;
      if (isFunction(options)) {
        options = {
          complete: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      if (!isFunction(options.complete)) options.complete = (function() {});
      type = trim(isString(type) ? type.toUpperCase() : "GET");
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      data = {};
      if (type === "POST" || type === "PUT") {
        data = JSON.stringify(this.serialize());
      }
      if (isObject(options.data)) data = extend(data, options.data);
      url = this.makeUrl(type);
      $.ajax({
        url: url,
        type: type,
        data: data,
        dataType: 'json',
        error: function(xhr) {
          var response;
          response = xhr.responseText;
          try {
            if (isString(response)) response = JSON.parse(response);
          } catch (e) {

          }
          return options.error.call(_this, _this, response, xhr);
        },
        success: function(data) {
          var _ref;
          _this.fill(data);
          switch (type) {
            case "GET":
              _this.trigger("fetch");
              break;
            case "POST":
              _this.trigger("create");
              break;
            case "PUT":
              _this.trigger("save");
              break;
            case "DELETE":
              _this.trigger("destroy");
          }
          return (_ref = options.success).call.apply(_ref, [_this, _this].concat(__slice.call(arguments)));
        },
        complete: function() {
          var _ref;
          return (_ref = options.complete).call.apply(_ref, [_this, _this].concat(__slice.call(arguments)));
        }
      });
      return this;
    };

    /*
    	#
    */

    Model.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    /*
    	#
    */

    Model.prototype.create = function(options) {
      return this.sync('POST', options);
    };

    /*
    	#
    */

    Model.prototype.save = function(options) {
      return this.sync('PUT', options);
    };

    /*
    	#
    */

    Model.prototype.destroy = function(options) {
      return this.sync('DELETE', options);
    };

    /*
    	#
    */

    Model.prototype.map = function(mapping) {
      var key, value,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (Falcon.isDataObject(this[key])) {
          this[key].map(value);
        } else {
          if (ko.isObservable(value)) {
            this[key] = ko.observable(ko.utils.unwrapObservable(value));
          } else if (isFunction(value)) {
            (function() {
              var _value;
              _value = value;
              return _this[key] = function() {
                return _value.call(_this, _this);
              };
            })();
          } else {
            this[key] = value;
          }
        }
      }
      return this;
    };

    /*
    	# Method: Falcon.Model#on()
    	#	Adds an event listener to a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to listen tpo
    	#	**action** _(function)_ - The callback function to attach to this event
    	#	**context** _(mixed)_ - The context to apply to the callback. Defaults to this model
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */

    Model.prototype.on = function(event, action, context) {
      var _base, _ref;
      if (!(isString(event) && isFunction(action))) return this;
      if (context == null) context = this;
      event = trim(event).toLowerCase();
      if (isEmpty(event)) return this;
      ((_ref = (_base = this._events)[event]) != null ? _ref : _base[event] = []).push({
        action: action,
        context: context
      });
      return this;
    };

    /*
    	# Method: Falcon.Model#off()
    	#	Removes an event listener from an event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to remove from
    	#	**action** _(function)_ - The event handler to remove
    	#
    	# Returns:
    	#	_(Flacon.Model)_ - This instance
    */

    Model.prototype.off = function(event, action) {
      var evt;
      if (!(isString(event) && isFunction(action))) return this;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return this;
      this._events[event] = (function() {
        var _i, _len, _ref, _results;
        _ref = this._events[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          evt = _ref[_i];
          if (evt.action !== action) _results.push(evt);
        }
        return _results;
      }).call(this);
      return this;
    };

    /*
    	# Method: Falcon.Model#has
    	#	Method used to see if this model has a specific event attached
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to look at
    	#	**action** _(function)_ - The event handler to look for
    	#
    	# Returns:
    	#	_(boolean)_ - Did we find the event?
    */

    Model.prototype.has = function(event, action) {
      var evt, _i, _len, _ref;
      if (!(isString(event) && isFunction(action))) return false;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return false;
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        if (evt.action === action) return true;
      }
      return false;
    };

    /*
    	# Method: Falcon.Model#trigger()
    	#	Used to trigger a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to trigger
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */

    Model.prototype.trigger = function(event) {
      var evt, _i, _len, _ref;
      if (!isString(event)) return this;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return this;
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        evt.action.call(evt.context, this);
      }
      return this;
    };

    return Model;

  })(Falcon.Class);

  /*
  #
  */

  Falcon.View = (function(_super) {
    var templateCache;

    __extends(View, _super);

    /*
    	#
    */

    templateCache = {};

    /*
    	#
    */

    View.extend = function(definition) {
      return Falcon.Class.extend(Falcon.View, definition);
    };

    View.prototype._loaded = false;

    View.prototype._loadQueue = [];

    /*
    	#
    */

    View.prototype.url = null;

    /*
    	#
    */

    View.prototype.template = null;

    /*
    	#
    */

    function View() {
      var _this = this;
      this.template = ko.observable(ko.utils.unwrapObservable(this.template));
      if (!isString(this.url)) this.url = "";
      this.url = trim(this.url);
      this._loaded = false;
      if (isEmpty(this.url)) {
        this._loaded = true;
      } else if (this.url in templateCache) {
        this._loaded = true;
        this.template(templateCache[this.url]);
      } else {
        $.ajax({
          url: this.url,
          type: "GET",
          cache: false,
          success: function(html) {
            templateCache[_this.url] = html;
            _this.template(html);
            _this._loaded = true;
            return _this.load();
          }
        });
      }
      this.initialize();
    }

    /*
    	#
    */

    View.prototype.initialize = (function() {});

    /*
    	#
    */

    View.prototype.viewModel = function() {
      var key, value, viewModel,
        _this = this;
      viewModel = {
        __falcon__: true
      };
      for (key in this) {
        value = this[key];
        if (!(!(key in Falcon.View.prototype))) continue;
        if (isFunction(value) && !ko.isObservable(value)) {
          value = (function() {
            var _value;
            _value = value;
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _value.call.apply(_value, [_this].concat(__slice.call(args)));
            };
          })();
        }
        viewModel[key] = value;
      }
      return viewModel;
    };

    /*
    	#
    */

    View.prototype.isLoaded = function() {
      return this._loaded;
    };

    /*
    	#
    */

    View.prototype.load = function(callback) {
      if (callback != null) {
        if (!isFunction(callback)) callback = (function() {});
        if (this._loaded) {
          callback.call(this);
        } else {
          this._loadQueue.push(callback);
        }
      } else if (this._loaded) {
        while (!(this._loadQueue.length <= 0)) {
          this._loadQueue.shift().call(this);
        }
      }
      return this;
    };

    return View;

  })(Falcon.Class);

  Falcon.Collection = (function(_super) {

    __extends(Collection, _super);

    /*
    	#
    */

    Collection.prototype.list = null;

    /*
    	#
    */

    Collection.prototype.model = null;

    /*
    	#
    */

    Collection.prototype.url = null;

    /*
    	#
    */

    Collection.prototype.length = 0;

    /*
    	#
    */

    Collection.prototype.parent = null;

    Collection._mappings = null;

    /*
    	#
    */

    Collection.extend = function(definition) {
      return Falcon.Class.extend(Falcon.Collection, definition);
    };

    /*
    	#
    */

    function Collection(models, parent) {
      var _ref,
        _this = this;
      if (!(parent != null) && Falcon.isModel(models)) {
        _ref = [models, parent], parent = _ref[0], models = _ref[1];
      }
      if (this.model != null) {
        if (this.url == null) this.url = this.model.prototype.url;
      }
      this.parent = parent;
      this.length = ko.observable(ko.utils.unwrapObservable(this.length));
      this.populated = ko.computed(function() {
        return _this.length() > 0;
      });
      this._mappings = [];
      this.reset().fill(models);
      this.initialize(models);
    }

    /*
    	#
    */

    Collection.prototype.initialize = (function() {});

    /*
    	# Method: Falcon.Collection#fill
    	#	'fills' this collection with new data
    	#
    	# Arguments:
    	#	**items** _(Array)_ - An array of items to fill this collection with
    	#
    	# Returns:
    	#	_Falcon.Collection_ - This instance
    */

    Collection.prototype.fill = function(items, options) {
      var i, item, m, mapping, method, _i, _j, _len, _len2, _ref;
      if (this.model == null) return this;
      if (items == null) items = [];
      if (Falcon.isCollection(items)) items = items.list();
      if (ko.isObservable(items)) items = ko.utils.unwrapObservable(items);
      if (!isArray(items)) items = [items];
      if (options == null) options = {};
      if (!isObject(options)) options = {};
      method = options.method;
      if (!isString(method)) method = '';
      method = method.toLowerCase();
      if (method !== 'replace' && method !== 'append' && method !== 'prepend') {
        method = 'replace';
      }
      for (i in items) {
        m = items[i];
        if (!(m instanceof this.model)) items[i] = new this.model(m, this.parent);
      }
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (Falcon.isDataObject(item)) {
          _ref = this._mappings;
          for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
            mapping = _ref[_j];
            item.map(mapping);
          }
        }
      }
      if (method === 'replace') {
        this.reset().list(items);
      } else if (method === 'prepend') {
        while (items.length > 0) {
          this.list.unshift(items.pop());
        }
      } else if (method === 'append') {
        while (items.length > 0) {
          this.list.push(items.shift());
        }
      }
      this.length(this.list().length);
      return this;
    };

    /*
    	# Method: Falcon.Collection#unwrap
    	#	Method used to 'unwrap' this object into an anonmous object
    	#	Needed to cascade inwards on other Falcon Data objects (like lists)
    	#	to unwrap newly added member variables/objects
    	#
    	# Returns
    	#	_Array_ - The 'unwrapped' array
    */

    Collection.prototype.unwrap = function() {
      var i, raw, value, _ref;
      raw = [];
      _ref = this.list();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    /*
    	# Method: Falcon.Collection#serialize
    	#	Serializes this collection and returns the raw array
    	#	of data
    */

    Collection.prototype.serialize = function() {
      var i, raw, value, _ref;
      raw = [];
      _ref = this.list();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.serialize() : value;
      }
      return raw;
    };

    /*
    	# Method: Falcon.Collection#makeUrl
    */

    Collection.prototype.makeUrl = function(type) {
      var parentPeriodIndex, parentUrl, url;
      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) url = "";
      url = trim(url);
      if (!isString(type)) type = "";
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      if (!startsWith(url, "/")) url = "/" + url;
      if (Falcon.isModel(this.parent)) {
        parentUrl = this.parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        if (parentPeriodIndex > -1) {
          parentUrl = parentUrl.slice(0, parentPeriodIndex);
        }
        parentUrl = trim(parentUrl);
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      return url;
    };

    /*
    	#
    */

    Collection.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    /*
    	#
    */

    Collection.prototype.sync = function(type, options) {
      var data, url, _ref,
        _this = this;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isObject(options.data)) options.data = {};
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      type = isString(type) ? type.toUpperCase() : "GET";
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      type = trim(type);
      data = (_ref = options.data) != null ? _ref : {};
      url = this.makeUrl(type);
      if (!((url != null) && isString(url))) return;
      $.ajax({
        url: trim(url),
        type: type,
        data: data,
        dataType: 'json',
        success: function() {
          var args, _ref2;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          data = (_ref2 = args[0]) != null ? _ref2 : {};
          if (isString(data)) data = JSON.parse(data);
          if (type === "GET") _this.fill(data, options);
          return options.success.apply(options, args);
        },
        error: options.error
      });
      return this;
    };

    /*
    	#
    */

    Collection.prototype.remove = function(items) {
      if (isArray(items)) {
        this.list.removeAll(items);
      } else {
        this.list.remove(items);
      }
      this.length(this.list().length);
      return this;
    };

    /*
    	#
    */

    Collection.prototype.append = function(items) {
      return this.fill(items, {
        'method': 'append'
      });
    };

    /*
    	#
    */

    Collection.prototype.prepend = function(items) {
      return this.fill(items, {
        'method': 'prepend'
      });
    };

    /*
    	# Method: Falcon.Collection#create
    	#	Creates a new model and adds it to the list of eisting models, 
    	#	also sends off a corresponding ajax request
    	#
    	# Returns:
    	#	_XmlHttpRequest_ - The XHR object that corresponds to this create instance
    	#
    	# TODO:
    	#	Re-evaluate this to work more like the 'destroy' method
    */

    Collection.prototype.create = function(data, options) {
      var _success,
        _this = this;
      if (this.model == null) return;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      _success = options.success;
      options.success = function(model) {
        _this.fill(model, options);
        return _success.apply(model, arguments);
      };
      return new this.model(data, this.parent).create(options);
    };

    /*
    	# Method: Falcon.Collection#destroy
    	#	Removes the specified models from the collection and database
    	#	executing each of te models destory method and passing the
    	#	'options' parameter along with the destroy call
    	#
    	# Arguments:
    	#	**models** _(Array)_ - An array of the models to remove, if this is not an array, 
    	#						   it will be placed in one as the only object, if the models 
    	#						   is a collection, we will destory all of the models in the list.
    	#						   When no argument is given for models (or the argument is the 
    	#						   string 'all'), we'll destory everything.
    	#
    	#	**options** _(Object)_ - An optional object of the settings to call when onto each 
    	#							 of the destroy methods of the 
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    */

    Collection.prototype.destroy = function(models, options) {
      var model, _i, _len, _success,
        _this = this;
      if (this.model == null) return this;
      if (!((models != null) && models !== 'all')) models = this.list();
      if (Falcon.isCollection(models)) models = models.list();
      if (!isArray(models)) models = [models];
      if (isEmpty(models)) return this;
      options = {
        success: options
      } === isFunction(options);
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      _success = options.success;
      options.success = function(model) {
        _this.remove(model);
        return _success.apply(model, arguments);
      };
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        if (Falcon.isDataObject(model)) model.destroy(options);
      }
      return this;
    };

    /*
    	#
    */

    Collection.prototype.at = function(index) {
      var list;
      if (!isNumber(index)) index = 0;
      list = this.list();
      if (index < 0) index = 0;
      if (index >= list.length) index = list.length - 1;
      return list[index];
    };

    /*
    	#
    */

    Collection.prototype.first = function() {
      return this.list()[0];
    };

    /*
    	#
    */

    Collection.prototype.last = function() {
      return this.list()[this.length - 1];
    };

    /*
    	#
    */

    Collection.prototype.map = function(mapping) {
      var key, model, value, _i, _len, _mapping, _ref,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      _mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (ko.isObservable(value)) {
          _mapping[key] = ko.observable(ko.utils.unwrapObservable(value));
        } else if (isFunction(value)) {
          (function() {
            var _value;
            _value = value;
            return _mapping[key] = function() {
              return _value.call(arguments[0], arguments[0], _this);
            };
          })();
        } else {
          _mapping[key] = value;
        }
      }
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (Falcon.isDataObject(model)) model.map(_mapping);
      }
      this._mappings.push(_mapping);
      return this;
    };

    /*
    	# Method: Falcon.Collection#reset
    	#	'resets' the internal array of this collection, 
    	#	this will make sure the list is an observable array, 
    	#	has no elements, and the length is restored to zero
    	#
    	# Returns:
    	#	_Falcon.Collection_ - This instance
    */

    Collection.prototype.reset = function() {
      if (this.list == null) this.list = ko.observableArray([]);
      this.list([]);
      this.length(this.list().length);
      return this;
    };

    return Collection;

  })(Falcon.Class);

  ko.bindingHandlers['view'] = (function() {
    var getTemplate, getViewModel, makeTemplateValueAccessor;
    makeTemplateValueAccessor = function(viewModel) {
      return function() {
        return {
          'if': viewModel,
          'data': viewModel,
          'templateEngine': ko.nativeTemplateEngine.instance
        };
      };
    };
    getViewModel = function(value) {
      var viewModel, _ref;
      viewModel = {};
      if (value == null) value = {};
      if (value instanceof Falcon.View) {
        viewModel = value.viewModel();
      } else {
        viewModel = ko.utils.unwrapObservable((_ref = value.viewModel) != null ? _ref : {});
      }
      return viewModel;
    };
    getTemplate = function(value) {
      var template, _ref;
      template = "";
      if (value == null) value = {};
      if (value instanceof Falcon.View) {
        template = value.template();
      } else {
        template = ko.utils.unwrapObservable((_ref = value.template) != null ? _ref : {});
      }
      return template;
    };
    return {
      'init': function(element, valueAccessor) {
        var value, viewModel;
        value = valueAccessor();
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        return ko.bindingHandlers['template']['init'](element, makeTemplateValueAccessor(viewModel));
      },
      'update': function() {
        var args, element, template, value, valueAccessor, viewModel;
        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = valueAccessor();
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        template = getTemplate(value);
        if (isEmpty(template)) return;
        if (isEmpty(viewModel)) return;
        if (ko.utils.domData.get(element, '__ko_view_updating__') === true) return;
        ko.utils.domData.set(element, '__ko_view_updating__', true);
        return defer(function() {
          var execScripts, originalTemplate, _ref;
          execScripts = !!ko.utils.unwrapObservable(value.execScripts);
          if (!(template != null)) {
            $(element).html("");
          } else {
            originalTemplate = ko.utils.domData.get(element, '__ko_anon_template__');
            ko.utils.domData.set(element, '__ko_anon_template__', template);
            (_ref = ko.bindingHandlers['template'])['update'].apply(_ref, [element, makeTemplateValueAccessor(viewModel)].concat(__slice.call(args)));
            if (template !== originalTemplate && execScripts === true) {
              $(element).find("script").each(function(index, script) {
                script = $(script);
                if (script.attr('type').toLowerCase() === "text/javascript") {
                  return eval(script.text());
                }
              });
            }
          }
          return ko.utils.domData.set(element, '__ko_view_updating__', false);
        });
      }
    };
  })();

  _foreach = ko.bindingHandlers['foreach'];

  ko.bindingHandlers['foreach'] = (function() {
    var getItems;
    getItems = function(items) {
      if (Falcon.isDataObject(items)) items = items.unwrap();
      if (!isArray(items)) items = [items];
      return (function() {
        return items;
      });
    };
    return {
      'init': function() {
        var args, element, value, valueAccessor;
        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        return _foreach['init'].apply(_foreach, [element, getItems(value)].concat(__slice.call(args)));
      },
      'update': function() {
        var args, element, value, valueAccessor;
        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        return _foreach['update'].apply(_foreach, [element, getItems(value)].concat(__slice.call(args)));
      }
    };
  })();

  for (key in _foreach) {
    value = _foreach[key];
    if (!(key in ko.bindingHandlers['foreach'])) {
      ko.bindingHandlers['foreach'][key] = value;
    }
  }

  ko.bindingHandlers['collection'] = ko.bindingHandlers['foreach'];

}).call(this);
