(function(){var e={}.hasOwnProperty,t=function(t,n){function i(){this.constructor=t}for(var o in n)e.call(n,o)&&(t[o]=n[o]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t};describe("Tesing event functionality",function(){var e;return e=null,beforeEach(function(){return e=new Falcon.Object}),it("Should have correct method definitions",function(){return expect(e.on).to.be.a("function"),expect(e.on).to.have.length(3),expect(e.off).to.be.a("function"),expect(e.off).to.have.length(2),expect(e.has).to.be.a("function"),expect(e.has).to.have.length(2),expect(e.trigger).to.be.a("function")}),it("Should test event methods",function(){var t,n,i,o;return e.on("click",t=sinon.spy()),e.on("click",n=sinon.spy(),i={}),e.on("mouseover",o=sinon.spy()),t.should.not.have.been.called,n.should.not.have.been.called,o.should.not.have.been.called,e.trigger("click",1,2,3),t.should.have.been.calledOnce,t.should.have.been.calledWith(1,2,3),n.should.have.been.calledOnce,n.should.have.been.calledWith(1,2,3),n.should.have.been.calledOn(i),o.should.not.have.been.called,e.trigger("mouseover","go",!0,{}),t.should.have.been.calledOnce,n.should.have.been.calledOnce,o.should.have.been.calledOnce,o.should.have.been.calledWith("go",!0,{}),expect(e.has("click",t)).to.be["true"],expect(e.has("click",n)).to.be["true"],expect(e.has("click",o)).to.be["false"],t.should.have.been.calledOnce,n.should.have.been.calledOnce,o.should.have.been.calledOnce,expect(e.has("mouseover",t)).to.be["false"],expect(e.has("mouseover",n)).to.be["false"],expect(e.has("mouseover",o)).to.be["true"],t.should.have.been.calledOnce,n.should.have.been.calledOnce,o.should.have.been.calledOnce,e.off("click",t),e.trigger("click",4,5,6),t.should.have.been.calledOnce,n.should.have.been.calledTwice,n.should.have.been.calledWith(4,5,6),o.should.have.been.calledOnce}),describe("Test #observables and #defaults",function(){var n,i,o,r;return n=function(e){function n(){return o=n.__super__.constructor.apply(this,arguments)}return t(n,e),n.prototype.defaults={id:"z",im:function(){return"here"}},n}(Falcon.Object),i=function(e){function i(){return r=i.__super__.constructor.apply(this,arguments)}return t(i,e),i.prototype.defaults={id:-1,foo:"bar",free:"bird",clazz:function(){return new n}},i.prototype.observables={hello:"world",foo:"baz",test:function(){return"method"},_another:"good",another:{read:function(){return this._another()+" "+this.test()},write:function(e){return this._another(e)}}},i}(Falcon.Object),e=null,beforeEach(function(){return e=new i}),it("Should have added the correct default attributes",function(){return expect(e).to.include.key("id"),expect(e).to.include.key("foo"),expect(e).to.include.key("clazz")}),it("Should have added the correct observable attributes",function(){return expect(e).to.include.key("hello"),expect(e).to.include.key("foo"),expect(e).to.include.key("test"),expect(e).to.include.key("_another"),expect(e).to.include.key("another")}),it("Should have added the correct default values",function(){return expect(e.id).to.equal(-1),expect(e.foo).to.not.equal("bar"),expect(e.free).to.equal("bird"),expect(e.clazz).to.be["instanceof"](n)}),it("Should have added the correct observable type",function(){return expect(ko.isObservable(e.hello)).to.be["true"],expect(ko.isObservable(e.foo)).to.be["true"],expect(ko.isComputed(e.test)).to.be["true"],expect(ko.isObservable(e._another)).to.be["true"],expect(ko.isComputed(e.another)).to.be["true"]}),it("Should have added the correct writeable observable type",function(){return expect(ko.isWriteableObservable(e.hello)).to.be["true"],expect(ko.isWriteableObservable(e.foo)).to.be["true"],expect(ko.isWriteableObservable(e.test)).to.be["false"],expect(ko.isWriteableObservable(e._another)).to.be["true"],expect(ko.isWriteableObservable(e.another)).to.be["true"]}),it("Should have assigned the correct values to observables",function(){return expect(ko.utils.unwrapObservable(e.hello)).to.equal("world"),expect(ko.utils.unwrapObservable(e.foo)).to.equal("baz"),expect(ko.utils.unwrapObservable(e.test)).to.equal("method"),expect(ko.utils.unwrapObservable(e._another)).to.equal("good"),expect(ko.utils.unwrapObservable(e.another)).to.equal("good method"),e.another("great"),expect(ko.utils.unwrapObservable(e.another)).to.equal("great method")}),it("Should have propogated defaults in the child class",function(){return expect(e.clazz.id).to.equal("z"),expect(e.clazz.im).to.equal("here")})})})}).call(this);