(function(){var e={}.hasOwnProperty,t=function(t,n){function o(){this.constructor=t}for(var i in n)e.call(n,i)&&(t[i]=n[i]);return o.prototype=n.prototype,t.prototype=new o,t.__super__=n.prototype,t};describe("Tesing event functionality",function(){var e;return e=null,beforeEach(function(){return e=new Falcon.Object}),it("Should have correct method definitions",function(){return expect(e.on).to.be.a("function"),expect(e.on).to.have.length(3),expect(e.off).to.be.a("function"),expect(e.off).to.have.length(2),expect(e.has).to.be.a("function"),expect(e.has).to.have.length(2),expect(e.trigger).to.be.a("function")}),it("Should test event methods",function(){var t,n,o,i;return e.on("click",t=sinon.spy()),e.on("click",n=sinon.spy(),o={}),e.on("mouseover",i=sinon.spy()),t.should.not.have.been.called,n.should.not.have.been.called,i.should.not.have.been.called,e.trigger("click",1,2,3),t.should.have.been.calledOnce,t.should.have.been.calledWith(1,2,3),n.should.have.been.calledOnce,n.should.have.been.calledWith(1,2,3),n.should.have.been.calledOn(o),i.should.not.have.been.called,e.trigger("mouseover","go",!0,{}),t.should.have.been.calledOnce,n.should.have.been.calledOnce,i.should.have.been.calledOnce,i.should.have.been.calledWith("go",!0,{}),expect(e.has("click",t)).to.be["true"],expect(e.has("click",n)).to.be["true"],expect(e.has("click",i)).to.be["false"],t.should.have.been.calledOnce,n.should.have.been.calledOnce,i.should.have.been.calledOnce,expect(e.has("mouseover",t)).to.be["false"],expect(e.has("mouseover",n)).to.be["false"],expect(e.has("mouseover",i)).to.be["true"],t.should.have.been.calledOnce,n.should.have.been.calledOnce,i.should.have.been.calledOnce,e.off("click",t),e.trigger("click",4,5,6),t.should.have.been.calledOnce,n.should.have.been.calledTwice,n.should.have.been.calledWith(4,5,6),i.should.have.been.calledOnce}),describe("Test #observables and #defaults",function(){var n,o,i,r;return n=function(e){function n(){return i=n.__super__.constructor.apply(this,arguments)}return t(n,e),n.prototype.defaults={id:"z",im:function(){return"here"}},n}(Falcon.Object),o=function(e){function o(){return r=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.defaults={id:-1,foo:"bar",free:"bird",clazz:function(){return new n}},o.prototype.observables={hello:"world",foo:"baz",arr:["1","2"],test:function(){return"method"},_another:"good",another:{read:function(){return this._another()+" "+this.test()},write:function(e){return this._another(e)}}},o}(Falcon.Object),e=null,beforeEach(function(){return e=new o}),it("Should have added the correct default attributes",function(){return expect(e).to.include.key("id"),expect(e).to.include.key("foo"),expect(e).to.include.key("clazz")}),it("Should have added the correct observable attributes",function(){return expect(e).to.include.key("hello"),expect(e).to.include.key("foo"),expect(e).to.include.key("test"),expect(e).to.include.key("_another"),expect(e).to.include.key("another")}),it("Should have added the correct default values",function(){return expect(e.id).to.equal(-1),expect(e.foo).to.not.equal("bar"),expect(e.free).to.equal("bird"),expect(e.clazz).to.be["instanceof"](n)}),it("Should have added the correct observable type",function(){return expect(ko.isObservable(e.hello)).to.be["true"],expect(ko.isObservable(e.foo)).to.be["true"],expect(ko.isComputed(e.test)).to.be["true"],expect(ko.isObservable(e._another)).to.be["true"],expect(ko.isComputed(e.another)).to.be["true"]}),it("Should have added the correct writeable observable type",function(){return expect(ko.isWriteableObservable(e.hello)).to.be["true"],expect(ko.isWriteableObservable(e.foo)).to.be["true"],expect(ko.isWriteableObservable(e.test)).to.be["false"],expect(ko.isWriteableObservable(e._another)).to.be["true"],expect(ko.isWriteableObservable(e.another)).to.be["true"]}),it("Should have assigned the correct values to observables",function(){return expect(ko.utils.unwrapObservable(e.hello)).to.equal("world"),expect(ko.utils.unwrapObservable(e.foo)).to.equal("baz"),expect(ko.utils.unwrapObservable(e.test)).to.equal("method"),expect(ko.utils.unwrapObservable(e._another)).to.equal("good"),expect(ko.utils.unwrapObservable(e.another)).to.equal("good method"),e.another("great"),expect(ko.utils.unwrapObservable(e.another)).to.equal("great method")}),it("Should have propogated defaults in the child class",function(){return expect(e.clazz.id).to.equal("z"),expect(e.clazz.im).to.equal("here")}),it("Should have an observable array",function(){return expect(ko.isObservable(e.arr)).to.be["true"],expect(e.arr()).to.be["instanceof"](Array),expect(e.arr().length).to.equal(2),expect(e.arr()).to.not.equal(o.prototype.observables.arr)}),it("Should create RawrClass with defaults that have the correct arguments",function(){var e,n,o,i;return n=null,e=function(e){function o(){return i=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.defaults={hello:n=sinon.spy()},o}(Falcon.Object),expect(n).to.not.have.been.called,o=new e("one","two","three"),expect(n).to.have.been.called,expect(n.callCount).to.equal(1),expect(n.firstCall.args.length).to.equal(3),expect(n.firstCall.args[0]).to.equal("one"),expect(n.firstCall.args[1]).to.equal("two"),expect(n.firstCall.args[2]).to.equal("three")})}),describe("Test the extend method on objects",function(){var e;return e=null,beforeEach(function(){return e=sinon.stub($,"ajax")}),afterEach(function(){return e.restore()}),it("Should extend Falcon.Object properly",function(){var e,t,n,o;return t=sinon.spy(),o=sinon.spy(),e=Falcon.Object.extend({custom:function(){return t.call(this)},text:"test"},{things:function(){return o.call(this)}}),n=new e,expect(n).to.be["instanceof"](Falcon.Object),expect(n).not.to.be["instanceof"](Falcon.Model),expect(n).not.to.be["instanceof"](Falcon.Collection),expect(n).not.to.be["instanceof"](Falcon.View),expect(e.prototype.custom).to.be.a("function"),expect(e.prototype.text).to.be.a("string"),expect(e.things).to.be.a("function"),expect(n.custom).to.be.a("function"),expect(n.text).to.be.a("string"),n.custom(),expect(t).to.have.been.called,expect(t.firstCall).to.have.been.calledOn(n),e.things(),expect(o).to.have.been.called,expect(o.firstCall).to.have.been.calledOn(e)}),it("Should extend Falcon.Model properly",function(){var e,t,n,o,i;return t=sinon.spy(),i=sinon.spy(),n=sinon.spy(),e=Falcon.Model.extend({initialize:function(){return n.call(this)},custom:function(){return t.call(this)},text:"test"},{things:function(){return i.call(this)}}),o=new e,expect(o).to.be["instanceof"](Falcon.Object),expect(o).to.be["instanceof"](Falcon.Model),expect(o).not.to.be["instanceof"](Falcon.Collection),expect(o).not.to.be["instanceof"](Falcon.View),expect(e.prototype.initialize).to.be.a("function"),expect(e.prototype.custom).to.be.a("function"),expect(e.prototype.text).to.be.a("string"),expect(e.things).to.be.a("function"),expect(o.initialize).to.be.a("function"),expect(o.custom).to.be.a("function"),expect(o.text).to.be.a("string"),expect(n).to.have.been.called,expect(n.firstCall).to.have.been.calledOn(o),o.custom(),expect(t).to.have.been.called,expect(t.firstCall).to.have.been.calledOn(o),e.things(),expect(i).to.have.been.called,expect(i.firstCall).to.have.been.calledOn(e)}),it("Should extend Falcon.Collection properly",function(){var e,t,n,o,i;return t=sinon.spy(),i=sinon.spy(),n=sinon.spy(),e=Falcon.Collection.extend({initialize:function(){return n.call(this)},custom:function(){return t.call(this)},text:"test"},{things:function(){return i.call(this)}}),o=new e,expect(o).to.be["instanceof"](Falcon.Object),expect(o).not.to.be["instanceof"](Falcon.Model),expect(o).to.be["instanceof"](Falcon.Collection),expect(o).not.to.be["instanceof"](Falcon.View),expect(e.prototype.initialize).to.be.a("function"),expect(e.prototype.custom).to.be.a("function"),expect(e.prototype.text).to.be.a("string"),expect(e.things).to.be.a("function"),expect(o.initialize).to.be.a("function"),expect(o.custom).to.be.a("function"),expect(o.text).to.be.a("string"),expect(n).to.have.been.called,expect(n.firstCall).to.have.been.calledOn(o),o.custom(),expect(t).to.have.been.called,expect(t.firstCall).to.have.been.calledOn(o),e.things(),expect(i).to.have.been.called,expect(i.firstCall).to.have.been.calledOn(e)}),it("Should extend Falcon.View properly",function(){var e,t,n,o,i;return t=sinon.spy(),i=sinon.spy(),n=sinon.spy(),e=Falcon.View.extend({initialize:function(){return n.call(this)},custom:function(){return t.call(this)},text:"test"},{things:function(){return i.call(this)}}),o=new e,expect(o).to.be["instanceof"](Falcon.Object),expect(o).not.to.be["instanceof"](Falcon.Model),expect(o).not.to.be["instanceof"](Falcon.Collection),expect(o).to.be["instanceof"](Falcon.View),expect(e.prototype.initialize).to.be.a("function"),expect(e.prototype.custom).to.be.a("function"),expect(e.prototype.text).to.be.a("string"),expect(e.things).to.be.a("function"),expect(o.initialize).to.be.a("function"),expect(o.custom).to.be.a("function"),expect(o.text).to.be.a("string"),expect(n).to.have.been.called,expect(n.firstCall).to.have.been.calledOn(o),o.custom(),expect(t).to.have.been.called,expect(t.firstCall).to.have.been.calledOn(o),e.things(),expect(i).to.have.been.called,expect(i.firstCall).to.have.been.calledOn(e)}),it("Should allow for deep inheritence",function(){var e,t,n,o,i;return o=sinon.spy(),i=sinon.spy(),t=Falcon.Object.extend({custom:function(){return o.call(this)},text:"test"},{things:function(){return i.call(this)}}),e=t.extend({another:function(){}},{foo:"bar"}),n=new e,expect(n).to.be["instanceof"](Falcon.Object),expect(n).to.be["instanceof"](t),expect(n).not.to.be["instanceof"](Falcon.Model),expect(n).not.to.be["instanceof"](Falcon.Collection),expect(n).not.to.be["instanceof"](Falcon.View),expect(e.prototype.custom).to.be.a("function"),expect(e.prototype.text).to.be.a("string"),expect(e.prototype.another).to.be.a("function"),expect(e.things).to.be.a("function"),expect(e.foo).to.be.a("string"),expect(n.custom).to.be.a("function"),expect(n.text).to.be.a("string"),expect(n.another).to.be.a("function"),n.custom(),expect(o).to.have.been.called,expect(o.firstCall).to.have.been.calledOn(n),e.things(),expect(i).to.have.been.called,expect(i.firstCall).to.have.been.calledOn(e)})})})}).call(this);