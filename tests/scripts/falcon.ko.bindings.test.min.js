(function(){var e={}.hasOwnProperty,t=function(t,n){function r(){this.constructor=t}for(var o in n)e.call(n,o)&&(t[o]=n[o]);return r.prototype=n.prototype,t.prototype=new r,t.__super__=n.prototype,t};describe("Test Knockout Bindings",function(){return describe("Test view binding",function(){var e,n,r,o,i,l,a,s,u,c,p,d,h,f,m,b,v,g;return u=ko.bindingHandlers.view,n=$("body"),e=$("<div id='application'></div>"),s=function(e){function n(){return b=n.__super__.constructor.apply(this,arguments)}return t(n,e),n.prototype.url="#layout-template",n.prototype.observables={content_view:null,footer_view:null},n.prototype.initialize=function(){return this.content_view(new l),this.footer_view(new a)},n}(Falcon.View),i=$("			<template id='layout-template'>				<div data-bind='view: $view.content_view'>				</div>				<div data-bind='view: $view.footer_view'>				</div>			</template>		"),l=function(e){function n(){return v=n.__super__.constructor.apply(this,arguments)}return t(n,e),n.prototype.url="#content-template",n}(Falcon.View),r=$("			<template id='content-template'>				The Content			</template>		"),a=function(e){function n(){return g=n.__super__.constructor.apply(this,arguments)}return t(n,e),n.prototype.url="#footer-template",n}(Falcon.View),o=$("			<template id='footer-template'>				The Footer			</template>		"),d=m=f=h=null,c=p=null,before(function(){return n.append(e),n.append(i),n.append(o),n.append(r),c=sinon.spy(u,"init"),p=sinon.spy(u,"update")}),after(function(){return e.remove(),i.remove(),o.remove(),r.remove(),c.restore(),p.restore()}),it("Should call the view binding on initialization without an observable",function(){var e,t,n;return n=new l,e=sinon.spy(n,"render"),t=sinon.spy(n,"unrender"),expect(c).to.not.have.been.called,expect(p).to.not.have.been.called,expect(e).to.not.have.been.called,expect(t).to.not.have.been.called,Falcon.apply(n,"#application"),expect(c).to.have.been.calledOnce,expect(p).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(t).to.not.have.been.called}),describe("Testing changes in views that are contained in observales",function(){var e,t,n,r,o,i,a,u,d,h,f,m,b,v,g,y;return y=new s,o=y.content_view(),m=y.footer_view(),b=ko.observable(null),v=sinon.spy(y,"render"),g=sinon.spy(y,"unrender"),i=sinon.spy(y,"display"),a=sinon.spy(y,"dispose"),n=sinon.spy(o,"render"),r=sinon.spy(o,"unrender"),e=sinon.spy(o,"display"),t=sinon.spy(o,"dispose"),h=sinon.spy(m,"render"),f=sinon.spy(m,"unrender"),u=sinon.spy(m,"display"),d=sinon.spy(m,"dispose"),beforeEach(function(){return c.reset(),p.reset(),v.reset(),n.reset(),h.reset(),i.reset(),e.reset(),u.reset(),g.reset(),r.reset(),f.reset(),a.reset(),t.reset(),d.reset()}),it("Should not call any render or unrender methods on unassigned observable",function(){return Falcon.apply(b,"#application"),expect(c).to.have.been.calledOnce,expect(p).to.have.been.calledOnce,expect(v).to.not.have.been.called,expect(n).to.not.have.been.called,expect(h).to.not.have.been.called,expect(i).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(g).to.not.have.been.called,expect(n).to.not.have.been.called,expect(f).to.not.have.been.called,expect(a).to.not.have.been.called,expect(t).to.not.have.been.called,expect(d).to.not.have.been.called}),it("Should call init, update, and render the correct number od times",function(){return b(y),expect(c).to.have.been.calledTwice,expect(p).to.have.been.calledThrice,expect(v).to.have.been.calledOnce,expect(n).to.have.been.calledOnce,expect(h).to.have.been.calledOnce,expect(i).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(u).to.have.been.calledOnce,expect(g).to.not.have.been.called,expect(r).to.not.have.been.called,expect(f).to.not.have.been.called,expect(a).to.not.have.been.called,expect(t).to.not.have.been.called,expect(d).to.not.have.been.called}),it("Should react to a child view being updated",function(){return y.content_view(new l),expect(c).to.not.have.been.called,expect(p).to.have.been.calledOnce,expect(v).to.not.have.been.called,expect(n).to.not.have.been.called,expect(h).to.not.have.been.called,expect(i).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(g).to.not.have.been.called,expect(r).to.have.been.calledOnce,expect(f).to.not.have.been.called,expect(a).to.not.have.been.called,expect(t).to.have.been.calledOnce,expect(d).to.not.have.been.called}),it("Should react to the entire, root, view being updated",function(){return b(new l),expect(c).to.not.have.been.called,expect(p).to.have.been.calledOnce,expect(v).to.not.have.been.called,expect(n).to.not.have.been.called,expect(h).to.not.have.been.called,expect(i).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(g).to.have.been.calledOnce,expect(r).to.have.been.calledOnce,expect(f).to.have.been.calledTwice,expect(a).to.have.been.calledOnce,expect(t).to.have.not.been.called,expect(d).to.have.been.calledOnce})})}),describe("Test updated foreach binding",function(){}),describe("Test updated options binding",function(){}),describe("Test log binding",function(){})})}).call(this);