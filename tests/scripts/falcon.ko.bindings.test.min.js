(function(){var e={}.hasOwnProperty,t=function(t,o){function l(){this.constructor=t}for(var n in o)e.call(o,n)&&(t[n]=o[n]);return l.prototype=o.prototype,t.prototype=new l,t.__super__=o.prototype,t};describe("Test Knockout Bindings",function(){return describe("Test view binding",function(){var e,o,l,n,a,r,c,i,u,s,d,p,h,f,b,m,w,x;return u=ko.bindingHandlers.view,o=$("body"),e=$("<div id='application'></div>"),i=function(e){function o(){return m=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#layout-template",o.prototype.observables={content_view:null,footer_view:null},o.prototype.initialize=function(){return this.content_view(new r),this.footer_view(new c)},o}(Falcon.View),a=$("			<template id='layout-template'>				<div data-bind='view: $view.content_view'>				</div>				<div data-bind='view: $view.footer_view'>				</div>			</template>		"),r=function(e){function o(){return w=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#content-template",o}(Falcon.View),l=$("			<template id='content-template'>				The Content			</template>		"),c=function(e){function o(){return x=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#footer-template",o}(Falcon.View),n=$("			<template id='footer-template'>				The Footer			</template>		"),p=b=f=h=null,s=d=null,before(function(){return o.append(e),o.append(a),o.append(n),o.append(l),s=sinon.spy(u,"init"),d=sinon.spy(u,"update")}),after(function(){return e.remove(),a.remove(),n.remove(),l.remove(),s.restore(),d.restore()}),it("Should call the view binding on initialization without an observable",function(){var e,t,o;return o=new r,e=sinon.spy(o,"render"),t=sinon.spy(o,"unrender"),expect(s).to.not.have.been.called,expect(d).to.not.have.been.called,expect(e).to.not.have.been.called,expect(t).to.not.have.been.called,Falcon.apply(o,"#application"),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(t).to.not.have.been.called}),describe("Testing changes in views that are contained in observales",function(){var e,t,o,l,n,a,c,u,p,h,f,b,m,w,x,_;return _=new i,n=_.content_view(),b=_.footer_view(),m=ko.observable(null),w=sinon.spy(_,"render"),x=sinon.spy(_,"unrender"),a=sinon.spy(_,"display"),c=sinon.spy(_,"dispose"),o=sinon.spy(n,"render"),l=sinon.spy(n,"unrender"),e=sinon.spy(n,"display"),t=sinon.spy(n,"dispose"),h=sinon.spy(b,"render"),f=sinon.spy(b,"unrender"),u=sinon.spy(b,"display"),p=sinon.spy(b,"dispose"),beforeEach(function(){return s.reset(),d.reset(),w.reset(),o.reset(),h.reset(),a.reset(),e.reset(),u.reset(),x.reset(),l.reset(),f.reset(),c.reset(),t.reset(),p.reset()}),it("Should not call any render or unrender methods on unassigned observable",function(){return Falcon.apply(m,"#application"),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(h).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(x).to.not.have.been.called,expect(o).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.not.have.been.called,expect(p).to.not.have.been.called}),it("Should call init, update, and render the correct number od times",function(){return m(_),expect(s).to.have.been.calledTwice,expect(d).to.have.been.calledThrice,expect(w).to.have.been.calledOnce,expect(o).to.have.been.calledOnce,expect(h).to.have.been.calledOnce,expect(a).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(u).to.have.been.calledOnce,expect(x).to.not.have.been.called,expect(l).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.not.have.been.called,expect(p).to.not.have.been.called}),it("Should react to a child view being updated",function(){return _.content_view(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(h).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(x).to.not.have.been.called,expect(l).to.have.been.calledOnce,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.have.been.calledOnce,expect(p).to.not.have.been.called}),it("Should react to the entire, root, view being updated",function(){return m(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(h).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(u).to.not.have.been.called,expect(x).to.have.been.calledOnce,expect(l).to.have.been.calledOnce,expect(f).to.have.been.calledTwice,expect(c).to.have.been.calledOnce,expect(t).to.have.not.been.called,expect(p).to.have.been.calledOnce})})}),describe("Test updated foreach binding",function(){}),describe("Test updated options binding",function(){}),describe("Test log binding",function(){})})}).call(this);