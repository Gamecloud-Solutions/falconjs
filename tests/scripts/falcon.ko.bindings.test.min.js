(function(){var e={}.hasOwnProperty,t=function(t,l){function o(){this.constructor=t}for(var n in l)e.call(l,n)&&(t[n]=l[n]);return o.prototype=l.prototype,t.prototype=new o,t.__super__=l.prototype,t};describe("Test Knockout Bindings",function(){return describe("Test view binding",function(){var e,l,o,n,a,r,c,u,i,s,d,h,p,f,m,b,w,_;return i=ko.bindingHandlers.view,l=$("body"),e=$("<div id='application'></div>"),u=function(e){function l(){return b=l.__super__.constructor.apply(this,arguments)}return t(l,e),l.prototype.url="#layout-template",l.prototype.observables={content_view:null,footer_view:null},l.prototype.initialize=function(){return this.content_view(new r),this.footer_view(new c)},l}(Falcon.View),a=$("			<template id='layout-template'>				<div data-bind='view: $view.content_view'>				</div>				<div data-bind='view: $view.footer_view'>				</div>			</template>		"),r=function(e){function l(){return w=l.__super__.constructor.apply(this,arguments)}return t(l,e),l.prototype.url="#content-template",l}(Falcon.View),o=$("			<template id='content-template'>				The Content			</template>		"),c=function(e){function l(){return _=l.__super__.constructor.apply(this,arguments)}return t(l,e),l.prototype.url="#footer-template",l}(Falcon.View),n=$("			<template id='footer-template'>				The Footer			</template>		"),h=m=f=p=null,s=d=null,before(function(){return l.append(e),l.append(a),l.append(n),l.append(o),s=sinon.spy(i,"init"),d=sinon.spy(i,"update")}),after(function(){return e.remove(),a.remove(),n.remove(),o.remove(),s.restore(),d.restore()}),it("Should call the view binding on initialization without an observable",function(){var e,t,l;return l=new r,e=sinon.spy(l,"render"),t=sinon.spy(l,"unrender"),expect(s).to.not.have.been.called,expect(d).to.not.have.been.called,expect(e).to.not.have.been.called,expect(t).to.not.have.been.called,Falcon.apply(l,"#application"),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(t).to.not.have.been.called}),describe("Testing changes in views that are contained in observales",function(){var e,t,l,o,n,a,c,i,h,p,f,m,b,w,_,v;return v=new u,n=v.content_view(),m=v.footer_view(),b=ko.observable(null),w=sinon.spy(v,"render"),_=sinon.spy(v,"unrender"),a=sinon.spy(v,"display"),c=sinon.spy(v,"dispose"),l=sinon.spy(n,"render"),o=sinon.spy(n,"unrender"),e=sinon.spy(n,"display"),t=sinon.spy(n,"dispose"),p=sinon.spy(m,"render"),f=sinon.spy(m,"unrender"),i=sinon.spy(m,"display"),h=sinon.spy(m,"dispose"),beforeEach(function(){return s.reset(),d.reset(),w.reset(),l.reset(),p.reset(),a.reset(),e.reset(),i.reset(),_.reset(),o.reset(),f.reset(),c.reset(),t.reset(),h.reset()}),it("Should not call any render or unrender methods on unassigned observable",function(){return Falcon.apply(b,"#application"),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(l).to.not.have.been.called,expect(p).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(i).to.not.have.been.called,expect(_).to.not.have.been.called,expect(l).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.not.have.been.called,expect(h).to.not.have.been.called}),it("Should call init, update, and render the correct number od times",function(){return b(v),expect(s).to.have.been.calledTwice,expect(d).to.have.been.calledThrice,expect(w).to.have.been.calledOnce,expect(l).to.have.been.calledOnce,expect(p).to.have.been.calledOnce,expect(a).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(i).to.have.been.calledOnce,expect(_).to.not.have.been.called,expect(o).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.not.have.been.called,expect(h).to.not.have.been.called}),it("Should react to a child view being updated",function(){return v.content_view(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(l).to.not.have.been.called,expect(p).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(i).to.not.have.been.called,expect(_).to.not.have.been.called,expect(o).to.have.been.calledOnce,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(t).to.have.been.calledOnce,expect(h).to.not.have.been.called}),it("Should react to the entire, root, view being updated",function(){return b(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(l).to.not.have.been.called,expect(p).to.not.have.been.called,expect(a).to.not.have.been.called,expect(e).to.not.have.been.called,expect(i).to.not.have.been.called,expect(_).to.have.been.calledOnce,expect(o).to.have.been.calledOnce,expect(f).to.have.been.calledTwice,expect(c).to.have.been.calledOnce,expect(t).to.have.not.been.called,expect(h).to.have.been.calledOnce})})}),describe("Test updated foreach binding",function(){}),describe("Test updated options binding",function(){}),describe("Test log binding",function(){})})}).call(this);