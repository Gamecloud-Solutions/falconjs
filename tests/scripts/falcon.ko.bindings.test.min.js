(function(){var e={}.hasOwnProperty,t=function(t,o){function l(){this.constructor=t}for(var n in o)e.call(o,n)&&(t[n]=o[n]);return l.prototype=o.prototype,t.prototype=new l,t.__super__=o.prototype,t};describe("Test Knockout Bindings",function(){var e,o,l,n;return e=null,l=0,o=$("body"),n=function(t){return l++,null!=e&&e.remove(),o.append(e=$("<div id='application_"+l+"'></div>")),Falcon.apply(t,"#application_"+l)},describe("Test view binding",function(){var e,l,a,r,c,i,u,s,d,p,h,f;return u=ko.bindingHandlers.view,i=function(e){function o(){return p=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#layout-template",o.prototype.observables={content_view:null,footer_view:null},o.prototype.initialize=function(){return this.content_view(new r),this.footer_view(new c)},o}(Falcon.View),a=$("			<template id='layout-template'>				<div data-bind='view: $view.content_view'>				</div>				<div data-bind='view: $view.footer_view'>				</div>			</template>		"),r=function(e){function o(){return h=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#content-template",o}(Falcon.View),e=$("			<template id='content-template'>				The Content			</template>		"),c=function(e){function o(){return f=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#footer-template",o}(Falcon.View),l=$("			<template id='footer-template'>				The Footer			</template>		"),s=d=null,before(function(){return o.append(a),o.append(l),o.append(e),s=sinon.spy(u,"init"),d=sinon.spy(u,"update")}),after(function(){return a.remove(),l.remove(),e.remove(),s.restore(),d.restore()}),it("Should call the view binding on initialization without an observable",function(){var e,t,o;return o=new r,e=sinon.spy(o,"_render"),t=sinon.spy(o,"_unrender"),expect(s).to.not.have.been.called,expect(d).to.not.have.been.called,expect(e).to.not.have.been.called,expect(t).to.not.have.been.called,n(o),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(t).to.not.have.been.called}),describe("Testing changes in views that are contained in observales",function(){var e,t,o,l,a,c,u,p,h,f,b,m,x,w,_,v;return v=new i,a=v.content_view(),m=v.footer_view(),x=ko.observable(null),w=sinon.spy(v,"_render"),_=sinon.spy(v,"_unrender"),c=sinon.spy(v,"display"),u=sinon.spy(v,"dispose"),o=sinon.spy(a,"_render"),l=sinon.spy(a,"_unrender"),e=sinon.spy(a,"display"),t=sinon.spy(a,"dispose"),f=sinon.spy(m,"_render"),b=sinon.spy(m,"_unrender"),p=sinon.spy(m,"display"),h=sinon.spy(m,"dispose"),beforeEach(function(){return s.reset(),d.reset(),w.reset(),o.reset(),f.reset(),c.reset(),e.reset(),p.reset(),_.reset(),l.reset(),b.reset(),u.reset(),t.reset(),h.reset()}),it("Should not call any render or unrender methods on unassigned observable",function(){return n(x),expect(s).to.have.been.calledOnce,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(e).to.not.have.been.called,expect(p).to.not.have.been.called,expect(_).to.not.have.been.called,expect(o).to.not.have.been.called,expect(b).to.not.have.been.called,expect(u).to.not.have.been.called,expect(t).to.not.have.been.called,expect(h).to.not.have.been.called}),it("Should call init, update, and render the correct number of times",function(){return x(v),expect(s).to.have.been.calledTwice,expect(d).to.have.been.calledThrice,expect(w).to.have.been.calledOnce,expect(o).to.have.been.calledOnce,expect(f).to.have.been.calledOnce,expect(c).to.have.been.calledOnce,expect(e).to.have.been.calledOnce,expect(p).to.have.been.calledOnce,expect(_).to.not.have.been.called,expect(l).to.not.have.been.called,expect(b).to.not.have.been.called,expect(u).to.not.have.been.called,expect(t).to.not.have.been.called,expect(h).to.not.have.been.called}),it("Should react to a child view being updated",function(){return v.content_view(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(e).to.not.have.been.called,expect(p).to.not.have.been.called,expect(_).to.not.have.been.called,expect(l).to.have.been.calledOnce,expect(b).to.not.have.been.called,expect(u).to.not.have.been.called,expect(t).to.have.been.calledOnce,expect(h).to.not.have.been.called}),it("Should react to the entire, root, view being updated",function(){return x(new r),expect(s).to.not.have.been.called,expect(d).to.have.been.calledOnce,expect(w).to.not.have.been.called,expect(o).to.not.have.been.called,expect(f).to.not.have.been.called,expect(c).to.not.have.been.called,expect(e).to.not.have.been.called,expect(p).to.not.have.been.called,expect(_).to.have.been.calledOnce,expect(l).to.have.been.calledOnce,expect(b).to.have.been.calledTwice,expect(u).to.have.been.calledOnce,expect(t).to.have.not.been.called,expect(h).to.have.been.calledOnce})})}),describe("Test updated foreach binding",function(){var l,a,r,c,i,u,s;return r=ko.bindingHandlers.foreach,c=i=null,a=function(e){function o(){return u=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.defaults={hello:"world"},o.prototype.observables={foo:"bar"},o}(Falcon.Model),l=function(e){function o(){return s=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.model=a,o}(Falcon.Collection),describe("Test flat bindings against arrays and collections",function(){var u,s,d,p,h,f,b,m,x,w,_;return f=function(e){function o(){return _=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#layout-template",o.prototype.defaults={collection_list:function(){return new l},collection_list_options:function(){return new l}},o.prototype.observables={array_list:[],array_list_options:[]},o.prototype.afterAdd=function(){},o.prototype.beforeRemove=function(e){return e.remove()},o}(Falcon.View),h=$("				<template id='layout-template'>					<ul class='array_list' data-bind='foreach: $view.array_list'><li>An Item</li></ul>					<ul class='collection_list' data-bind='foreach: $view.collection_list'><li>An Item</li></ul>					<ul class='array_list_options' data-bind='foreach: {data: $view.array_list_options, afterAdd: $view.afterAdd, beforeRemove: $view.beforeRemove}'><li>An Item</li></ul>					<ul class='collection_list_options' data-bind='foreach: {data: $view.collection_list_options, afterAdd: $view.afterAdd, beforeRemove: $view.beforeRemove}'><li>An Item</li></ul>				</template>			"),x=null,w=ko.observable(),u=d=null,s=p=null,b=m=null,before(function(){return o.append(e),o.append(h),c=sinon.spy(r,"init"),i=sinon.spy(r,"update"),n(w)}),beforeEach(function(){var e;return x=new f,w(x),b=sinon.spy(x.viewModel(),"afterAdd"),m=sinon.spy(x.viewModel(),"beforeRemove"),e=u,u=$(".array_list"),d=$(".collection_list"),s=$(".array_list_options"),p=$(".collection_list_options")}),afterEach(function(){return e.empty(),c.reset(),i.reset(),b.restore(),m.restore()}),after(function(){return e.remove(),h.remove(),c.restore(),i.restore()}),it("Should properly list with an observable array",function(){return expect(c).to.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(c.callCount).to.equal(4),expect(i.callCount).to.equal(4),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),c.reset(),i.reset(),x.array_list.push("Hello"),x.array_list.push("World","Foo Bar"),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(2),expect(u.children().length).to.equal(3),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),i.reset(),x.array_list.pop(),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(1),expect(u.children().length).to.equal(2),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0)}),it("Should properly list with a collection",function(){return expect(c).to.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(c.callCount).to.equal(4),expect(i.callCount).to.equal(4),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),c.reset(),i.reset(),x.collection_list.push(new a),x.collection_list.push([new a,new a]),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(2),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(3),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),i.reset(),x.collection_list.pop(),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(1),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(2),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0)}),it("Should properly list with an observable array including options",function(){return expect(c).to.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(c.callCount).to.equal(4),expect(i.callCount).to.equal(4),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),c.reset(),i.reset(),x.array_list_options.push("Hello2"),x.array_list_options.push("World2","Foo Bar2"),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(2),expect(b.callCount).to.equal(3),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(3),expect(p.children().length).to.equal(0),i.reset(),b.reset(),x.array_list_options.pop(),x.array_list_options.pop(),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.have.been.called,expect(i.callCount).to.equal(2),expect(m.callCount).to.equal(2),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(1),expect(p.children().length).to.equal(0)}),it("Should properly list with a collection including options",function(){return expect(c).to.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.not.have.been.called,expect(c.callCount).to.equal(4),expect(i.callCount).to.equal(4),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(0),c.reset(),i.reset(),x.collection_list_options.push(new a),x.collection_list_options.push([new a,new a]),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.have.been.called,expect(m).to.not.have.been.called,expect(i.callCount).to.equal(2),expect(b.callCount).to.equal(3),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(3),i.reset(),b.reset(),x.collection_list_options.pop(),x.collection_list_options.pop(),expect(c).to.not.have.been.called,expect(i).to.have.been.called,expect(b).to.not.have.been.called,expect(m).to.have.been.called,expect(i.callCount).to.equal(2),expect(m.callCount).to.equal(2),expect(u.children().length).to.equal(0),expect(d.children().length).to.equal(0),expect(s.children().length).to.equal(0),expect(p.children().length).to.equal(1)})}),describe("Test observable bindings against collections",function(){var u,s,d,p,h,f,b,m;return d=function(e){function o(){return m=o.__super__.constructor.apply(this,arguments)}return t(o,e),o.prototype.url="#layout-template",o.prototype.defaults={collection_a1:function(){return new l},collection_a2:function(){return new l}},o.prototype.observables={selected_number:1,selected_collection:function(){return 1===this.selected_number()?this.collection_a1:this.collection_a2}},o}(Falcon.View),s=$("				<template id='layout-template'>					<ul class='collection_list' data-bind='foreach: $view.selected_collection'><li>An Item</li></ul>				</template>			"),f=null,b=ko.observable(),u=null,p=h=null,before(function(){return o.append(s),c=sinon.spy(r,"init"),i=sinon.spy(r,"update"),n(b)}),beforeEach(function(){return f=new d,b(f),u=$(".collection_list")}),afterEach(function(){return e.empty(),c.reset(),i.reset()}),after(function(){return e.remove(),s.remove(),c.restore(),i.restore()}),it("Should properly update if collection is switched to another with same update count",function(){return expect(c).to.have.been.called,expect(i).to.have.been.called,expect(c.callCount).to.equal(1),expect(i.callCount).to.equal(1),c.reset(),i.reset(),f.collection_a1.fill([new a,new a]),f.collection_a2.fill([new a,new a,new a,new a,new a]),expect(c).to.have.not.been.called,expect(i).to.have.been.called,expect(i.callCount).to.equal(1),expect(u.children().length).to.equal(2),c.reset(),i.reset(),f.selected_number(2),expect(c).to.have.not.been.called,expect(i).to.have.been.called,expect(i.callCount).to.equal(1),expect(u.children().length).to.equal(5),c.reset(),i.reset(),f.selected_number(1),expect(c).to.have.not.been.called,expect(i).to.have.been.called,expect(i.callCount).to.equal(1),expect(u.children().length).to.equal(2)})})}),describe("Test updated options binding",function(){}),describe("Test log binding",function(){})})}).call(this);