
/*
	Falcon.js
	by Rick Allen (stoodder)

	Version 0.0.2
	Full source at https://github.com/stoodder/falconjs
	Copyright (c) 2011 RokkinCat, http://www.rokkincat.com

	MIT License, https://github.com/stoodder/falconjs/blob/master/LICENSE.md
	This file is generated by `cake build`, do not edit it by hand.
*/

(function() {
  var Falcon, arrayContains, arrayPeek, arraysEqual, compact, countSubstrings, defer, delay, endsWith, extend, isArray, isBoolean, isEmpty, isFunction, isNumber, isObject, isString, objectKeys, objectValues, objectsEqual, startsWith, trim, trimSlashes,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __slice = Array.prototype.slice;

  isObject = function(object) {
    return (typeof object) === (typeof {}) && object !== null;
  };

  isFunction = function(object) {
    return Object.prototype.toString.call(object) === "[object Function]";
  };

  isBoolean = function(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  };

  isArray = function(object) {
    return Object.prototype.toString.call(object) === "[object Array]";
  };

  isString = function(object) {
    return Object.prototype.toString.call(object) === "[object String]";
  };

  isNumber = function(object) {
    return Object.prototype.toString.call(object) === "[object Number]";
  };

  isEmpty = function(object) {
    var key, value;
    if (isObject(object)) {
      for (key in object) {
        value = object[key];
        return false;
      }
      return true;
    } else if (isString(object) || isArray(object)) {
      return object.length === 0;
    } else if (object === null || typeof object === "undefined") {
      return true;
    }
    return false;
  };

  trim = function(str) {
    return str.replace(/^\s+/, '').replace(/\s+$/, '');
  };

  trimSlashes = function(str) {
    return str.replace(/^\//, '').replace(/\/$/, '');
  };

  startsWith = function(haystack, needle) {
    return haystack.indexOf(needle) === 0;
  };

  endsWith = function(haystack, needle) {
    return haystack.indexOf(needle, haystack.length - needle.length) !== -1;
  };

  countSubstrings = function(str, substr) {
    return str.split(substr).length - 1;
  };

  objectKeys = function(obj) {
    var key, _results;
    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  };

  objectValues = function(obj) {
    var key, value, _results;
    _results = [];
    for (key in obj) {
      value = obj[key];
      _results.push(value);
    }
    return _results;
  };

  objectsEqual = function(obj1, obj2) {
    var key, value;
    for (key in obj1) {
      value = obj1[key];
      if (obj2[key] !== value) return false;
    }
    for (key in obj2) {
      value = obj2[key];
      if (obj1[key] !== value) return false;
    }
    return true;
  };

  compact = function(obj) {
    var key, newObj, value;
    if (!isObject(obj)) obj = {};
    newObj = {};
    for (key in obj) {
      value = obj[key];
      if (value != null) newObj[key] = value;
    }
    return newObj;
  };

  extend = function(obj, extender) {
    var key, value;
    if (obj == null) obj = {};
    if (!isObject(extender)) extender = {};
    for (key in extender) {
      value = extender[key];
      obj[key] = value;
    }
    return obj;
  };

  arraysEqual = function(arr1, arr2) {
    var index, value, _len;
    if (arr1.length !== arr2.length) return false;
    for (index = 0, _len = arr1.length; index < _len; index++) {
      value = arr1[index];
      if (arr2[index] !== value) return false;
    }
    return true;
  };

  arrayPeek = function(arr) {
    return arr[arr.length - 1];
  };

  arrayContains = function(haystack, needle) {
    var hay, _i, _len;
    if (isFunction(haystack.indexOf)) {
      return haystack.indexOf(needle) !== -1;
    } else if (isArray(haystack)) {
      for (_i = 0, _len = haystack.length; _i < _len; _i++) {
        hay = haystack[_i];
        if (hay === needle) return true;
      }
    }
    return false;
  };

  delay = function(time, callback) {
    var _ref;
    if (isFunction(time)) {
      _ref = [callback, time], time = _ref[0], callback = _ref[1];
    }
    if (!isNumber(time)) time = 1;
    if (!isFunction(callback)) callback = (function() {});
    if (time < 1) time = 1;
    return setTimeout(callback, time);
  };

  defer = function(callback) {
    if (!isFunction(callback)) callback = (function() {});
    return setTimeout(callback, 1);
  };

  Falcon = {
    version: "0.0.2",
    apply: function(view) {
      return $(function() {
        $('body').attr('data-bind', 'view: $data');
        return ko.applyBindings(view);
      });
    },
    isModel: function(object) {
      return (object != null) && object instanceof Falcon.Model;
    },
    isCollection: function(object) {
      return (object != null) && object instanceof Falcon.Collection;
    },
    isView: function(object) {
      return (object != null) && object instanceof Falcon.View;
    },
    isDataObject: function(object) {
      return (object != null) && (object instanceof Falcon.Model || object instanceof Falcon.Collection);
    }
  };

  this.Falcon = Falcon;

  Falcon.Class = (function() {

    function Class() {}

    Class.prototype["super"] = function() {};

    Class.extend = function(parent, definition) {
      var child, ctor;
      if (parent == null) parent = Falcon.Class;
      child = null;
      if ((definition != null) && definition.hasOwnProperty("constructor")) {
        child = definition.constructor;
      } else {
        child = function() {
          return this.__super__.apply(this, arguments);
        };
      }
      ctor = (function() {});
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.prototype.__super__ = function() {
        return parent.apply(this, arguments);
      };
      child.extend = function(definition) {
        return Falcon.Class.extend(child, definition);
      };
      extend(child.prototype, definition != null ? definition : {});
      return child;
    };

    return Class;

  })();

  Falcon.Model = (function(_super) {

    __extends(Model, _super);

    Model.extend = function(properties) {
      return Falcon.Class.extend(Falcon.Model, properties);
    };

    Model.prototype.url = null;

    Model.prototype.parent = null;

    Model.prototype._events = null;

    /*
    	# Method: constructor
    	#	The constructor for a model
    */

    function Model(data, parent) {
      var _ref;
      if (Falcon.isModel(data)) {
        _ref = [data, parent], parent = _ref[0], data = _ref[1];
      }
      this._events = {};
      this.id = ko.observable(0);
      this.parent = parent;
      this.initialize(data);
      this.data(data);
    }

    Model.prototype.initialize = (function() {});

    /*
    	#
    */

    Model.prototype.data = function(data) {
      var key, ret, value;
      if (isEmpty(data)) {
        ret = {};
        for (key in this) {
          value = this[key];
          if (!(key in Falcon.Model.prototype)) {
            if (Falcon.isDataObject(value)) {
              ret[key] = value.data();
            } else if (ko.isObservable(value) || isFunction(value)) {
              ret[key] = value;
            }
          }
        }
        return ret;
      }
      if (!isObject(data)) data = {};
      for (key in data) {
        value = data[key];
        this.set(key, value);
      }
      return this;
    };

    /*
    	#
    */

    Model.prototype.get = function(key) {
      var datum;
      if (!isString(key)) return;
      datum = this[key];
      return ko.utils.unwrapObservable(datum);
    };

    /*
    	#
    */

    Model.prototype.set = function(key, value) {
      var datum, _ref;
      if (!(key != null) || key in Falcon.Model.prototype) return this;
      if (ko.isObservable(value)) value = ko.utils.unwrapObservable(value);
      datum = ((_ref = this[key]) != null ? _ref : this[key] = ko.observable());
      if (Falcon.isDataObject(datum)) {
        datum.data(value);
      } else if (ko.isObservable(datum)) {
        datum(value);
      }
      return this;
    };

    /*
    	#
    */

    Model.prototype.makeUrl = function(type) {
      var ext, periodIndex, url;
      url = trim(isFunction(this.url) ? this.url() : this.url);
      ext = "";
      periodIndex = url.lastIndexOf(".");
      if (periodIndex > -1) {
        ext = url.slice(periodIndex);
        url = url.slice(0, periodIndex);
      }
      if (type === "GET" || type === "PUT" || type === "DELETE") {
        if (url.slice(-1) !== "/") url += "/";
        url += this.id();
      }
      return "" + url + ext;
    };

    /*
    	#
    */

    Model.prototype.sync = function(type, options) {
      var data, url,
        _this = this;
      if (isFunction(options)) {
        options = {
          complete: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      if (!isFunction(options.complete)) options.complete = (function() {});
      type = isString(type) ? type.toUpperCase() : "GET";
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      type = trim(type);
      data = {};
      if (type === "POST" || type === "PUT") data = this.toJSON();
      url = this.makeUrl(type);
      $.ajax({
        url: url,
        type: type,
        data: data,
        dataType: 'json',
        error: function() {
          var _ref;
          return (_ref = options.error).call.apply(_ref, [_this, _this].concat(__slice.call(arguments)));
        },
        success: function(data) {
          var _ref;
          _this.data(data);
          switch (type) {
            case "GET":
              _this.trigger("fetch");
              break;
            case "POST":
              _this.trigger("create");
              break;
            case "PUT":
              _this.trigger("save");
              break;
            case "DELETE":
              _this.trigger("destroy");
          }
          return (_ref = options.success).call.apply(_ref, [_this, _this].concat(__slice.call(arguments)));
        },
        complete: function() {
          var _ref;
          return (_ref = options.complete).call.apply(_ref, [_this, _this].concat(__slice.call(arguments)));
        }
      });
      return this;
    };

    /*
    	#
    */

    Model.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    /*
    	#
    */

    Model.prototype.create = function(options) {
      return this.sync('POST', options);
    };

    /*
    	#
    */

    Model.prototype.save = function(options) {
      return this.sync('PUT', options);
    };

    /*
    	#
    */

    Model.prototype.destroy = function(options) {
      return this.sync('DELETE', options);
    };

    /*
    	#
    */

    Model.prototype.map = function(mapping) {
      var key, value,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (Falcon.isDataObject(this[key])) {
          this[key].map(value);
        } else {
          if (ko.isObservable(value)) {
            value = ko.observable(ko.utils.unwrapObservable(value));
          } else if (isFunction(value)) {
            value = (function() {
              var _value;
              _value = value;
              return (function() {
                return _value.call(_this, _this);
              });
            })();
          }
          this[key] = value;
        }
      }
      return this;
    };

    /*
    	#
    */

    Model.prototype.on = function(event, action) {
      var _base, _ref,
        _this = this;
      if (!((event != null) && (action != null))) return this;
      if (!isString(event)) event = "";
      if (!isFunction(action)) action = (function() {});
      event = trim(event).toLowerCase();
      if (isEmpty(event)) return this;
      ((_ref = (_base = this._events)[event]) != null ? _ref : _base[event] = []).push(function() {
        return action.call(_this, _this);
      });
      return this;
    };

    /*
    	#
    */

    Model.prototype.trigger = function(event) {
      var action, _i, _len, _ref;
      if (event == null) return this;
      if (!isString(event)) event = "";
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return this;
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        action();
      }
      return this;
    };

    /*
    	#
    */

    Model.prototype.toJSON = function() {
      var data, key, recur, ret, value, _ref;
      data = {};
      _ref = this.data();
      for (key in _ref) {
        value = _ref[key];
        data[key] = value;
      }
      ret = (recur = function(value) {
        var k, output, v;
        value = ko.utils.unwrapObservable(value);
        if (isArray(value)) {
          return (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              v = value[_i];
              _results.push(recur(v));
            }
            return _results;
          })();
        } else if (Falcon.isCollection(value)) {
          return (function() {
            var _i, _len, _ref2, _ref3, _results;
            _ref3 = (_ref2 = value.list()) != null ? _ref2 : [];
            _results = [];
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              v = _ref3[_i];
              _results.push(recur(v));
            }
            return _results;
          })();
        } else if (isObject(value)) {
          output = {};
          for (k in value) {
            v = value[k];
            output[k] = recur(v);
          }
          return output;
        } else {
          return value;
        }
      })(data);
      if (!isEmpty(ret)) return ko.utils.stringifyJson(ret);
    };

    return Model;

  })(Falcon.Class);

  /*
  #
  */

  Falcon.View = (function(_super) {
    var templateCache;

    __extends(View, _super);

    /*
    	#
    */

    templateCache = {};

    /*
    	#
    */

    View.extend = function(definition) {
      return Falcon.Class.extend(Falcon.View, definition);
    };

    View.prototype._loaded = false;

    View.prototype._loadQueue = [];

    /*
    	#
    */

    View.prototype.url = null;

    /*
    	#
    */

    View.prototype.template = null;

    /*
    	#
    */

    function View() {
      var _this = this;
      this.template = ko.observable(ko.utils.unwrapObservable(this.template));
      if (!isString(this.url)) this.url = "";
      this.url = trim(this.url);
      this._loaded = false;
      if (isEmpty(this.url)) {
        this._loaded = true;
      } else if (this.url in templateCache) {
        this._loaded = true;
        this.template(templateCache[this.url]);
      } else {
        $.ajax({
          url: this.url,
          type: "GET",
          cache: false,
          success: function(html) {
            templateCache[_this.url] = html;
            _this.template(html);
            _this._loaded = true;
            return _this.load();
          }
        });
      }
      this.initialize();
    }

    /*
    	#
    */

    View.prototype.initialize = (function() {});

    /*
    	#
    */

    View.prototype.viewModel = function() {
      var key, value, viewModel,
        _this = this;
      viewModel = {
        __falcon__: true
      };
      for (key in this) {
        value = this[key];
        if (!(!(key in Falcon.View.prototype))) continue;
        if (isFunction(value) && !ko.isObservable(value)) {
          value = (function() {
            var _value;
            _value = value;
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _value.call.apply(_value, [_this].concat(__slice.call(args)));
            };
          })();
        }
        viewModel[key] = value;
      }
      return viewModel;
    };

    /*
    	#
    */

    View.prototype.isLoaded = function() {
      return this._loaded;
    };

    /*
    	#
    */

    View.prototype.load = function(callback) {
      if (callback != null) {
        if (!isFunction(callback)) callback = (function() {});
        if (this._loaded) {
          callback.call(this);
        } else {
          this._loadQueue.push(callback);
        }
      } else if (this._loaded) {
        while (!(this._loadQueue.length <= 0)) {
          this._loadQueue.shift().call(this);
        }
      }
      return this;
    };

    return View;

  })(Falcon.Class);

  Falcon.Collection = (function(_super) {

    __extends(Collection, _super);

    /*
    	#
    */

    Collection.prototype.list = null;

    /*
    	#
    */

    Collection.prototype.model = null;

    /*
    	#
    */

    Collection.prototype.url = null;

    /*
    	#
    */

    Collection.prototype.length = 0;

    /*
    	#
    */

    Collection.prototype.parent = null;

    Collection._mappings = null;

    /*
    	#
    */

    Collection.extend = function(definition) {
      return Falcon.Class.extend(Falcon.Collection, definition);
    };

    /*
    	#
    */

    function Collection(models, parent) {
      var _ref;
      if (!(parent != null) && Falcon.isModel(models)) {
        _ref = [models, parent], parent = _ref[0], models = _ref[1];
      }
      if (this.model != null) {
        if (this.url == null) this.url = this.model.prototype.url;
      }
      this.parent = parent;
      this._mappings = [];
      this.reset().add(models);
      this.initialize(models);
    }

    /*
    	#
    */

    Collection.prototype.initialize = (function() {});

    /*
    	#
    */

    Collection.prototype.data = function(models) {
      var i, ret, value, _ref;
      if (isEmpty(models)) {
        ret = [];
        _ref = this.list();
        for (i in _ref) {
          value = _ref[i];
          if (value instanceof Falcon.Model || value instanceof Falcon.Collection) {
            ret[i] = value.data();
          } else {
            ret[i] = value;
          }
        }
        return ret;
      }
      this.add(models);
      return this;
    };

    /*
    	#
    */

    Collection.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    /*
    	#
    */

    Collection.prototype.sync = function(type, options) {
      var data, url, _ref,
        _this = this;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isObject(options.data)) options.data = {};
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      type = isString(type) ? type.toUpperCase() : "GET";
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      type = trim(type);
      data = (_ref = options.data) != null ? _ref : {};
      url = isFunction(this.url) ? this.url() : this.url;
      if (!((url != null) && isString(url))) return;
      return $.ajax({
        url: trim(url),
        type: type,
        data: data,
        dataType: 'json',
        success: function() {
          var args, _ref2;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          data = (_ref2 = args[0]) != null ? _ref2 : {};
          if (isString(data)) data = JSON.parse(data);
          _this.add(data, options);
          return options.success.apply(options, args);
        },
        error: options.error
      });
    };

    /*
    	#
    */

    Collection.prototype.add = function(items, options) {
      var append, item, mapping, prepend, replace, _i, _j, _len, _len2, _ref;
      if (this.model == null) return this;
      if (items == null) items = [];
      if (options == null) options = {};
      items = this.parse(items);
      if (!isObject(options)) options = {};
      prepend = options.prepend, append = options.append, replace = options.replace;
      if (!isBoolean(prepend)) prepend = false;
      if (!isBoolean(append)) append = false;
      if (!isBoolean(replace)) replace = !prepend && !append;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (Falcon.isDataObject(item)) {
          _ref = this._mappings;
          for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {
            mapping = _ref[_j];
            item.map(mapping);
          }
        }
      }
      if (replace) {
        this.reset().list(items);
      } else if (prepend) {
        while (items.length > 0) {
          this.list.unshift(items.pop());
        }
      } else if (append) {
        while (items.length > 0) {
          this.list.push(items.shift());
        }
      }
      this.length = this.list().length;
      return this;
    };

    /*
    	#
    */

    Collection.prototype.remove = function(items) {
      if (isArray(items)) {
        this.list.removeAll(items);
      } else {
        this.list.remove(items);
      }
      return this;
    };

    /*
    	#
    */

    Collection.prototype.append = function(items) {
      return this.add(items, {
        append: true
      });
    };

    /*
    	#
    */

    Collection.prototype.prepend = function(items) {
      return this.add(items, {
        prepend: true
      });
    };

    /*
    	#
    */

    Collection.prototype.create = function(data, options) {
      var _success,
        _this = this;
      if (this.model == null) return;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      _success = options.success;
      options.success = function(model) {
        _this.add(model, options);
        return _success.apply(model, arguments);
      };
      return new this.model(data, this.parent).create(options);
    };

    Collection.prototype.destroy = function(models, options) {
      var model, _i, _len, _success,
        _this = this;
      if (this.model == null) return this;
      if (!isArray(models)) models = [models];
      if (isEmpty(models)) return this;
      options = {
        success: options
      } === isFunction(options);
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      _success = options.success;
      options.success = function(model) {
        _this.remove(model);
        return _success.apply(model, arguments);
      };
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        if (Falcon.isDataObject(model)) model.destroy(options);
      }
      return this;
    };

    /*
    	#
    */

    Collection.prototype.at = function(index) {
      var list;
      if (!isNumber(index)) index = 0;
      list = this.list();
      if (index < 0) index = 0;
      if (index >= list.length) index = list.length - 1;
      return list[index];
    };

    /*
    	#
    */

    Collection.prototype.map = function(mapping) {
      var key, model, value, _i, _len, _ref,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (isFunction(value) && !ko.isObservable(value)) {
          value = (function() {
            var _value;
            _value = value;
            return (function() {
              return _value.call(arguments[0], arguments[0], _this);
            });
          })();
        }
        mapping[key] = value;
      }
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (Falcon.isDataObject(model)) model.map(mapping);
      }
      this._mappings.push(mapping);
      return this;
    };

    /*
    	#
    */

    Collection.prototype.parse = function(items) {
      var i, m;
      if (!isArray(items)) items = [items];
      if (this.model == null) return items;
      for (i in items) {
        m = items[i];
        if (!(m instanceof this.model)) items[i] = new this.model(m, this.parent);
      }
      return items;
    };

    /*
    	#
    */

    Collection.prototype.reset = function() {
      if (this.list == null) this.list = ko.observableArray([]);
      this.list([]);
      this.length = this.list().length;
      return this;
    };

    return Collection;

  })(Falcon.Class);

  extend(ko.bindingHandlers, {
    view: (function() {
      var getTemplate, getViewModel, makeTemplateValueAccessor;
      makeTemplateValueAccessor = function(viewModel) {
        return function() {
          return {
            'if': viewModel,
            'data': viewModel,
            'templateEngine': ko.nativeTemplateEngine.instance
          };
        };
      };
      getViewModel = function(value) {
        var viewModel, _ref;
        viewModel = {};
        if (value == null) value = {};
        if (value instanceof Falcon.View) {
          viewModel = value.viewModel();
        } else {
          viewModel = ko.utils.unwrapObservable((_ref = value.viewModel) != null ? _ref : {});
        }
        return viewModel;
      };
      getTemplate = function(value) {
        var template, _ref;
        template = "";
        if (value == null) value = {};
        if (value instanceof Falcon.View) {
          template = value.template();
        } else {
          template = ko.utils.unwrapObservable((_ref = value.template) != null ? _ref : {});
        }
        return template;
      };
      return {
        'init': function(element, valueAccessor) {
          var value, viewModel;
          value = valueAccessor();
          value = ko.utils.unwrapObservable(value);
          viewModel = getViewModel(value);
          return ko.bindingHandlers['template']['init'](element, makeTemplateValueAccessor(viewModel));
        },
        'update': function() {
          var args, element, template, value, valueAccessor, viewModel;
          element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          value = valueAccessor();
          value = ko.utils.unwrapObservable(value);
          viewModel = getViewModel(value);
          template = getTemplate(value);
          if (isEmpty(template)) return;
          if (isEmpty(viewModel)) return;
          if (ko.utils.domData.get(element, '__ko_view_updating__') === true) {
            return;
          }
          ko.utils.domData.set(element, '__ko_view_updating__', true);
          return defer(function() {
            var execScripts, originalTemplate, _ref;
            execScripts = !!ko.utils.unwrapObservable(value.execScripts);
            if (!(template != null)) {
              $(element).html("");
            } else {
              originalTemplate = ko.utils.domData.get(element, '__ko_anon_template__');
              ko.utils.domData.set(element, '__ko_anon_template__', template);
              (_ref = ko.bindingHandlers['template'])['update'].apply(_ref, [element, makeTemplateValueAccessor(viewModel)].concat(__slice.call(args)));
              if (template !== originalTemplate && execScripts === true) {
                $(element).find("script").each(function(index, script) {
                  script = $(script);
                  if (script.attr('type').toLowerCase() === "text/javascript") {
                    return eval(script.text());
                  }
                });
              }
            }
            return ko.utils.domData.set(element, '__ko_view_updating__', false);
          });
        }
      };
    })(),
    collection: (function() {
      var getItems;
      getItems = function(items) {
        if (items instanceof Falcon.Collection) items = items.data();
        if (!isArray(items)) items = [];
        return (function() {
          return items;
        });
      };
      return {
        init: function() {
          var args, element, value, valueAccessor, _ref;
          element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          value = valueAccessor();
          return (_ref = ko.bindingHandlers['foreach'])['init'].apply(_ref, [element, getItems(value)].concat(__slice.call(args)));
        },
        update: function() {
          var args, element, value, valueAccessor, _ref;
          element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          value = valueAccessor();
          return (_ref = ko.bindingHandlers['foreach'])['update'].apply(_ref, [element, getItems(value)].concat(__slice.call(args)));
        }
      };
    })()
  });

}).call(this);
