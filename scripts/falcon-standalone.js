/*
	Falcon.js
	by Rick Allen (stoodder)

	Version 0.3.0
	Full source at https://github.com/stoodder/falconjs
	Copyright (c) 2011 RokkinCat, http://www.rokkincat.com

	MIT License, https://github.com/stoodder/falconjs/blob/master/LICENSE.md
	This file is generated by `cake build`, do not edit it by hand.
*/


(function() {
  var $document, $window, Falcon, arrayContains, arrayPeek, arrayRemove, arrayUnique, arraysEqual, compact, countSubstrings, defer, delay, endsWith, extend, findKey, flattenObjectKeys, isArray, isBoolean, isEmpty, isFunction, isNaN, isNumber, isObject, isString, key, objectKeys, objectValues, objectsEqual, startsWith, trim, trimSlashes, value, _bindingContext, _foreach, _getItems, _options, _ref, _ref1, _shouldUpdate,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  isObject = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object Object]";
  };

  isFunction = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object Function]";
  };

  isBoolean = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object Boolean]";
  };

  isArray = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object Array]";
  };

  isString = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object String]";
  };

  isNumber = function(object) {
    return (object != null) && Object.prototype.toString.call(object) === "[object Number]";
  };

  isNaN = function(object) {
    return isNumber(object) && object !== object;
  };

  isEmpty = function(object) {
    var key, value;

    if (isObject(object)) {
      for (key in object) {
        value = object[key];
        return false;
      }
      return true;
    } else if (isString(object) || isArray(object)) {
      return object.length === 0;
    } else if (object === null || typeof object === "undefined") {
      return true;
    }
    return false;
  };

  trim = function(str) {
    return str.replace(/^\s+/, '').replace(/\s+$/, '');
  };

  trimSlashes = function(str) {
    return str.replace(/^\//, '').replace(/\/$/, '');
  };

  startsWith = function(haystack, needle) {
    return haystack.indexOf(needle) === 0;
  };

  endsWith = function(haystack, needle) {
    return haystack.indexOf(needle, haystack.length - needle.length) !== -1;
  };

  countSubstrings = function(str, substr) {
    return str.split(substr).length - 1;
  };

  objectKeys = function(obj) {
    var key, _results;

    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  };

  objectValues = function(obj) {
    var key, value, _results;

    _results = [];
    for (key in obj) {
      value = obj[key];
      _results.push(value);
    }
    return _results;
  };

  objectsEqual = function(obj1, obj2) {
    var key, value;

    for (key in obj1) {
      value = obj1[key];
      if (obj2[key] !== value) {
        return false;
      }
    }
    for (key in obj2) {
      value = obj2[key];
      if (obj1[key] !== value) {
        return false;
      }
    }
    return true;
  };

  compact = function(obj) {
    var key, newObj, value;

    if (!isObject(obj)) {
      obj = {};
    }
    newObj = {};
    for (key in obj) {
      value = obj[key];
      if (value != null) {
        newObj[key] = value;
      }
    }
    return newObj;
  };

  extend = function(obj, extender) {
    var key, value;

    if (obj == null) {
      obj = {};
    }
    if (!isObject(extender)) {
      extender = {};
    }
    for (key in extender) {
      value = extender[key];
      obj[key] = value;
    }
    return obj;
  };

  findKey = function(obj, value) {
    var k, v;

    for (k in obj) {
      v = obj[k];
      if (v === value) {
        return k;
      }
    }
    return void 0;
  };

  flattenObjectKeys = function(obj, prefix) {
    var flat, key, value;

    flat = [];
    if (!isString(prefix)) {
      prefix = "";
    }
    for (key in obj) {
      value = obj[key];
      if (isObject(value)) {
        flat = flat.concat(flattenObjectKeys(value, "" + prefix + key + "."));
      } else {
        flat.push("" + prefix + key);
      }
    }
    return flat;
  };

  arraysEqual = function(arr1, arr2) {
    var index, value, _i, _len;

    if (arr1.length !== arr2.length) {
      return false;
    }
    for (index = _i = 0, _len = arr1.length; _i < _len; index = ++_i) {
      value = arr1[index];
      if (arr2[index] !== value) {
        return false;
      }
    }
    return true;
  };

  arrayPeek = function(arr) {
    return arr[arr.length - 1];
  };

  arrayContains = function(haystack, needle) {
    var hay, _i, _len;

    if (isFunction(haystack.indexOf)) {
      return haystack.indexOf(needle) !== -1;
    } else if (isArray(haystack)) {
      for (_i = 0, _len = haystack.length; _i < _len; _i++) {
        hay = haystack[_i];
        if (hay === needle) {
          return true;
        }
      }
    }
    return false;
  };

  arrayUnique = function(arr) {
    var key, obj, value, _i, _len;

    obj = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      key = arr[_i];
      obj[key] = true;
    }
    return (function() {
      var _results;

      _results = [];
      for (key in obj) {
        value = obj[key];
        _results.push(key);
      }
      return _results;
    })();
  };

  arrayRemove = function(arr, items) {
    var item, _i, _item, _len;

    if (!isArray(arr)) {
      return [];
    }
    if (!isArray(items)) {
      items = [items];
    }
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      arr = (function() {
        var _j, _len1, _results;

        _results = [];
        for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
          _item = arr[_j];
          if (_item !== item) {
            _results.push(_item);
          }
        }
        return _results;
      })();
    }
    return arr;
  };

  delay = function(time, callback) {
    var _ref;

    if (isFunction(time)) {
      _ref = [callback, time], time = _ref[0], callback = _ref[1];
    }
    if (!isNumber(time)) {
      time = 1;
    }
    if (!isFunction(callback)) {
      callback = (function() {});
    }
    if (time < 1) {
      time = 1;
    }
    return setTimeout(callback, time);
  };

  defer = function(callback) {
    if (!isFunction(callback)) {
      callback = (function() {});
    }
    return setTimeout(callback, 1);
  };

  Falcon = {
    version: "0.3.0",
    applicationElement: "body",
    baseApiUrl: "",
    baseTemplateUrl: "",
    cache: true,
    apply: function(root, element, viewCallback) {
      var _ref, _ref1;

      if (isFunction(element)) {
        _ref = [viewCallback, element], element = _ref[0], viewCallback = _ref[1];
      }
      if (!isString(element)) {
        element = "";
      }
      element = trim(element);
      if (isEmpty(element)) {
        element = (_ref1 = Falcon.applicationElement) != null ? _ref1 : "body";
      }
      if (!isFunction(viewCallback)) {
        viewCallback = (function() {
          return ko.observable();
        });
      }
      document.createElement("template");
      return $(function() {
        var $element;

        $('template').each(function(index, template) {
          var identifier;

          template = $(template);
          identifier = template.attr("id");
          if (identifier != null) {
            Falcon.View.cacheTemplate("#" + identifier, template.html());
          }
          return template.remove();
        });
        $element = $(element);
        $element.attr('data-bind', 'view: $data');
        ko.applyBindings(root, $element[0]);
        return viewCallback();
      });
    },
    isModel: function(object) {
      return (object != null) && object instanceof Falcon.Model;
    },
    isCollection: function(object) {
      return (object != null) && object instanceof Falcon.Collection;
    },
    isView: function(object) {
      return (object != null) && object instanceof Falcon.View;
    },
    isDataObject: function(object) {
      return (object != null) && (object instanceof Falcon.Model || object instanceof Falcon.Collection);
    },
    isFalconObject: function(object) {
      return (object != null) && (object instanceof Falcon.Class);
    }
  };

  this.Falcon = Falcon;

  $window = $(window);

  $document = $(document);

  Falcon.Class = (function() {
    /*
    	# Method: Falcon.Class.extend
    	#	Used to extend (as in, inherit) from one class to another
    	#
    	# Arguments:
    	#	**parent** _(Object)_ - The parent to extend from
    	#	**definition** _(Object)_ - The child's class definition
    	#
    	# Returns:
    	#	_Object_ - The extended class
    */
    Class.extend = function(instanceDef, staticDef) {
      var child, ctor, parent;

      if (instanceDef == null) {
        instanceDef = {};
      }
      if (staticDef == null) {
        staticDef = {};
      }
      parent = this;
      child = null;
      if (Object.prototype.hasOwnProperty.call(instanceDef, "constructor")) {
        child = instanceDef.constructor;
      } else {
        child = function() {
          return parent.apply(this, arguments);
        };
      }
      ctor = (function() {
        return this.constructor = child;
      });
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      extend(child.prototype, instanceDef);
      extend(child, parent);
      extend(child, staticDef);
      child.__super__ = parent.prototype;
      return child;
    };

    /*
    	# Local event storage
    */


    Class.prototype._events = null;

    /*
    	# Method: Falcon.Class()
    	#	The constructor method
    */


    function Class() {
      this._events = {};
    }

    /*
    	# Method: Falcon.Model#on()
    	#	Adds an event listener to a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to listen tpo
    	#	**action** _(function)_ - The callback function to attach to this event
    	#	**context** _(mixed)_ - The context to apply to the callback. Defaults to this model
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */


    Class.prototype.on = function(event, action, context) {
      var _base, _ref;

      if (!(isString(event) && isFunction(action))) {
        return this;
      }
      if (context == null) {
        context = this;
      }
      event = trim(event).toLowerCase();
      if (isEmpty(event)) {
        return this;
      }
      ((_ref = (_base = this._events)[event]) != null ? _ref : _base[event] = []).push({
        action: action,
        context: context
      });
      return this;
    };

    /*
    	# Method: Falcon.Model#off()
    	#	Removes an event listener from an event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to remove from
    	#	**action** _(function)_ - The event handler to remove
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */


    Class.prototype.off = function(event, action) {
      var evt;

      if (!isString(event)) {
        return this;
      }
      event = trim(event).toLowerCase();
      if (isEmpty(event) || (this._events[event] == null)) {
        return this;
      }
      if (isFunction(action)) {
        this._events[event] = (function() {
          var _i, _len, _ref, _results;

          _ref = this._events[event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            evt = _ref[_i];
            if (evt.action !== action) {
              _results.push(evt);
            }
          }
          return _results;
        }).call(this);
        if (this._events[event].length <= 0) {
          this._events[event] = null;
        }
      } else {
        this._events[event] = null;
      }
      return this;
    };

    /*
    	# Method: Falcon.Model#has
    	#	Method used to see if this model has a specific event attached
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to look at
    	#	**action** _(function)_ - The event handler to look for
    	#
    	# Returns:
    	#	_(boolean)_ - Did we find the event?
    */


    Class.prototype.has = function(event, action) {
      var evt, _i, _len, _ref;

      if (!isString(event)) {
        return false;
      }
      event = trim(event).toLowerCase();
      if (isEmpty(event) || (this._events[event] == null)) {
        return false;
      }
      if ((this._events[event] != null) && !isFunction(action)) {
        return true;
      }
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        if (evt.action === action) {
          return true;
        }
      }
      return false;
    };

    /*
    	# Method: Falcon.Model#trigger()
    	#	Used to trigger a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to trigger
    	#	**args...** _(arguments)_ - Additional arguments to pass into the
    	#								event listeners
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */


    Class.prototype.trigger = function() {
      var args, event, evt, _i, _len, _ref;

      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!isString(event)) {
        return this;
      }
      event = trim(event).toLowerCase();
      if (isEmpty(event) || (this._events[event] == null)) {
        return this;
      }
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        evt.action.apply(evt.context, args);
      }
      return this;
    };

    return Class;

  })();

  Falcon.Model = (function(_super) {
    __extends(Model, _super);

    Model.extend = function(properties) {
      return Falcon.Class.extend(Falcon.Model, properties);
    };

    Model.prototype.id = null;

    Model.prototype.url = null;

    Model.prototype.parent = null;

    Model.prototype.fields = {};

    function Model(data, parent) {
      var field, model_field, _ref, _ref1, _ref2;

      Model.__super__.constructor.call(this);
      data = ko.utils.unwrapObservable(data);
      parent = ko.utils.unwrapObservable(parent);
      if ((parent != null) && !Falcon.isModel(parent) && Falcon.isModel(data)) {
        _ref = [data, parent], parent = _ref[0], data = _ref[1];
      }
      if ((parent == null) && Falcon.isModel(data)) {
        _ref1 = [data, parent], parent = _ref1[0], data = _ref1[1];
      }
      if (Falcon.isModel(data)) {
        data = data.unwrap();
      }
      this.parent = parent;
      this.initialize(data);
      if (!isEmpty(data)) {
        this.fill(data);
      }
      _ref2 = this.fields;
      for (field in _ref2) {
        model_field = _ref2[field];
        if ((this[model_field] == null) && isString(model_field)) {
          this[model_field] = null;
        }
      }
    }

    Model.prototype.initialize = function(data) {};

    Model.prototype.get = function(key) {
      if (!isString(key)) {
        return this.undefined;
      }
      return ko.utils.unwrapObservable(this[key]);
    };

    Model.prototype.set = function(key, value) {
      var k, v;

      if (isObject(key)) {
        for (k in key) {
          v = key[k];
          this.set(k, v);
        }
        return this;
      }
      if (!isString(key)) {
        return this;
      }
      if (ko.isObservable(this[key])) {
        this[key](value);
      } else {
        this[key] = value;
      }
      return this;
    };

    Model.prototype.toggle = function(key) {
      return this.set(key, !this.get(key));
    };

    Model.prototype.parse = function(data, options, xhr) {
      return data;
    };

    Model.prototype.fill = function(_data) {
      var acceptedKeys, data, key, protoKeys, rejectedKeys, value, _ref;

      if (isNumber(_data) || isString(_data)) {
        _data = {
          'id': _data
        };
      }
      if (!isObject(_data)) {
        return this;
      }
      if (Falcon.isModel(_data)) {
        _data = _data.unwrap();
      }
      if (isEmpty(_data)) {
        return this;
      }
      data = {};
      if (isObject(this.fields) && !isEmpty(this.fields)) {
        for (key in _data) {
          value = _data[key];
          data[(_ref = this.fields[key]) != null ? _ref : key] = value;
        }
      } else {
        data = _data;
      }
      protoKeys = objectKeys(Falcon.Model.prototype);
      acceptedKeys = arrayRemove(objectKeys(this), protoKeys);
      rejectedKeys = arrayRemove(protoKeys, acceptedKeys);
      rejectedKeys = arrayRemove(rejectedKeys, ["id", "url"]);
      rejectedKeys = arrayUnique(rejectedKeys);
      for (key in data) {
        value = data[key];
        if (!(!(__indexOf.call(rejectedKeys, key) >= 0))) {
          continue;
        }
        value = ko.utils.unwrapObservable(value);
        if (Falcon.isModel(this[key])) {
          if (!isEmpty(value)) {
            this[key].fill(value);
          }
        } else if (Falcon.isCollection(this[key])) {
          if (!(isEmpty(value) && this[key].length() <= 0)) {
            this[key].fill(value);
          }
        } else if (ko.isObservable(this[key])) {
          if (ko.isWriteableObservable(this[key])) {
            this[key](value);
          }
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.unwrap = function() {
      var key, keys, raw, value, _i, _len;

      raw = {};
      keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      keys[keys.length] = "id";
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        value = this[key];
        raw[key] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    Model.prototype.serialize = function(fields, deep) {
      var field, index, model_field, model_key, model_keys, raw, server_field, server_key, server_keys, value, _i, _j, _len, _len1, _ref, _ref1;

      raw = {};
      if (!isBoolean(deep) && isBoolean(fields)) {
        _ref = [fields, deep], deep = _ref[0], fields = _ref[1];
      }
      if (!isBoolean(deep)) {
        deep = true;
      }
      if (isEmpty(fields)) {
        fields = null;
      }
      if (isString(fields)) {
        fields = trim(fields).split(",");
      }
      if (fields == null) {
        fields = this.fields;
      }
      server_keys = [];
      model_keys = [];
      if (isArray(fields) && !isEmpty(fields)) {
        if (isObject(this.fields)) {
          for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            server_keys[server_keys.length] = (_ref1 = findKey(this.fields, field)) != null ? _ref1 : field;
            model_keys[model_keys.length] = field;
          }
        } else {
          for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
            field = fields[_j];
            server_keys[server_keys.length] = field;
            model_keys[model_keys.length] = field;
          }
        }
      } else if (isObject(fields) && !isEmpty(fields)) {
        for (server_field in fields) {
          model_field = fields[server_field];
          server_keys[server_keys.length] = server_field;
          model_keys[model_keys.length] = model_field in this ? model_field : server_field;
        }
      } else {
        server_keys = model_keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      }
      server_keys.push("id");
      server_keys = arrayUnique(server_keys);
      model_keys.push("id");
      model_keys = arrayUnique(model_keys);
      for (index in model_keys) {
        model_key = model_keys[index];
        server_key = server_keys[index];
        value = this[model_key];
        if (Falcon.isDataObject(value)) {
          raw[server_key] = deep ? value.serialize() : value.serialize(["id"]);
        } else if (ko.isObservable(value)) {
          raw[server_key] = ko.utils.unwrapObservable(value);
        } else if (!isFunction(value)) {
          raw[server_key] = value;
        }
      }
      return raw;
    };

    Model.prototype.makeUrl = function(type, parent) {
      var ext, parentPeriodIndex, parentSlashIndex, parentUrl, periodIndex, url;

      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) {
        url = "";
      }
      url = trim(url);
      if (!isString(type)) {
        type = "";
      }
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      parent = parent !== void 0 ? parent : this.parent;
      ext = "";
      periodIndex = url.lastIndexOf(".");
      if (periodIndex > -1) {
        ext = url.slice(periodIndex);
        url = url.slice(0, periodIndex);
      }
      if (!startsWith(url, "/")) {
        url = "/" + url;
      }
      if (Falcon.isModel(parent)) {
        parentUrl = parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        parentSlashIndex = parentUrl.lastIndexOf("/");
        if (parentSlashIndex < parentPeriodIndex) {
          if (parentPeriodIndex > -1) {
            parentUrl = parentUrl.slice(0, parentPeriodIndex);
          }
          parentUrl = trim(parentUrl);
        }
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      if (type === "GET" || type === "PUT" || type === "DELETE") {
        if (url.slice(-1) !== "/") {
          url += "/";
        }
        url += ko.utils.unwrapObservable(this.id);
      }
      url = url.replace(/([^:])\/\/+/gi, "$1/");
      return "" + url + ext;
    };

    Model.prototype.sync = function(type, options) {
      var data, json, key, url, value, _ref, _ref1,
        _this = this;

      if (isFunction(options)) {
        options = {
          complete: options
        };
      }
      if (isString(options)) {
        options = {
          fields: trim(options).split(",")
        };
      }
      if (isArray(options)) {
        options = {
          fields: options
        };
      }
      if (!isObject(options)) {
        options = {};
      }
      if (!isObject(options.data)) {
        options.data = {};
      }
      if (!isString(options.dataType)) {
        options.dataType = "json";
      }
      if (!isString(options.contentType)) {
        options.contentType = "application/json";
      }
      if (!isFunction(options.success)) {
        options.success = (function() {});
      }
      if (!isFunction(options.complete)) {
        options.complete = (function() {});
      }
      if (!isFunction(options.error)) {
        options.error = (function() {});
      }
      if (!Falcon.isModel(options.parent)) {
        options.parent = this.parent;
      }
      if (!isArray(options.fields)) {
        options.fields = [];
      }
      if (!isObject(options.params)) {
        options.params = {};
      }
      if (!isBoolean(options.fill)) {
        options.fill = true;
      }
      if (!isObject(options.headers)) {
        options.headers = {};
      }
      type = trim(isString(type) ? type.toUpperCase() : "GET");
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      data = {};
      if (!isEmpty(options.data)) {
        _ref = options.data;
        for (key in _ref) {
          value = _ref[key];
          data[key] = value;
        }
      }
      if (type === "POST" || type === "PUT") {
        data = extend(this.serialize(options.fields), data);
      }
      json = isEmpty(data) ? "" : JSON.stringify(data);
      url = (_ref1 = options.url) != null ? _ref1 : this.makeUrl(type, options.parent);
      if (!isEmpty(options.params)) {
        if (!(url.indexOf("?") > -1)) {
          url += "?";
        }
        url += ((function() {
          var _ref2, _results;

          _ref2 = options.params;
          _results = [];
          for (key in _ref2) {
            value = _ref2[key];
            _results.push("" + key + "=" + value);
          }
          return _results;
        })()).join("&");
      }
      return $.ajax({
        'type': type,
        'url': url,
        'data': json,
        'dataType': options.dataType,
        'contentType': options.contentType,
        'cache': Falcon.cache,
        'headers': options.headers,
        'success': function(data, status, xhr) {
          if (isString(data)) {
            data = JSON.parse(data);
          }
          if ((data == null) && isString(xhr.responseText)) {
            data = JSON.parse(xhr.responseText);
          }
          if (data == null) {
            data = {};
          }
          data = _this.parse(data, options, xhr);
          if (options.fill) {
            _this.fill(data, options);
          }
          switch (type) {
            case "GET":
              _this.trigger("fetch", data);
              break;
            case "POST":
              _this.trigger("create", data);
              break;
            case "PUT":
              _this.trigger("save", data);
              break;
            case "DELETE":
              _this.trigger("destroy", data);
          }
          return options.success.call(_this, _this, data, status, xhr);
        },
        'error': function(xhr) {
          var e, response;

          response = xhr.responseText;
          try {
            if (isString(response)) {
              response = JSON.parse(response);
            }
          } catch (_error) {
            e = _error;
          }
          return options.error.call(_this, _this, response, xhr);
        },
        'complete': function(xhr, status) {
          return options.complete.call(_this, _this, xhr, status);
        }
      });
    };

    Model.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    Model.prototype.create = function(options) {
      return this.sync('POST', options);
    };

    Model.prototype.save = function(options) {
      return this.sync('PUT', options);
    };

    Model.prototype.destroy = function(options) {
      return this.sync('DELETE', options);
    };

    Model.prototype.equals = function(model) {
      model = ko.utils.unwrapObservable(model);
      if (Falcon.isModel(model)) {
        return model.get("id") === this.get("id");
      } else if (isNumber(model) || isString(model)) {
        return model === this.get("id");
      }
      return false;
    };

    Model.prototype.mixin = function(mapping) {
      var key, value,
        _this = this;

      if (!isObject(mapping)) {
        mapping = {};
      }
      for (key in mapping) {
        value = mapping[key];
        if (Falcon.isDataObject(this[key])) {
          this[key].mixin(value);
        } else {
          if (ko.isObservable(value)) {
            this[key] = ko.observable(ko.utils.unwrapObservable(value));
          } else if (isFunction(value)) {
            (function() {
              var _value;

              _value = value;
              return _this[key] = function() {
                var args;

                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return _value.call.apply(_value, [_this, _this].concat(__slice.call(args)));
              };
            })();
          } else {
            this[key] = value;
          }
        }
      }
      return this;
    };

    Model.prototype.clone = function(parent) {
      parent = (parent != null) || parent === null ? parent : this.parent;
      return new this.constructor(this.unwrap(), parent);
    };

    Model.prototype.copy = function(fields, parent) {
      if (fields === null || Falcon.isModel(fields)) {
        parent = fields;
      }
      if (!isArray(fields)) {
        fields = ["id"];
      }
      if (!(parent === null || Falcon.isModel(parent))) {
        parent = this.parent;
      }
      return new this.constructor(this.serialize(fields), parent);
    };

    Model.prototype.isNew = function() {
      return this.get("id") == null;
    };

    return Model;

  })(Falcon.Class);

  Falcon.View = (function(_super) {
    var _template_cache;

    __extends(View, _super);

    _template_cache = {};

    View.cacheTemplate = function(identifier, template) {
      if (!isString(identifier)) {
        identifier = "";
      }
      if (!isString(template)) {
        template = "";
      }
      identifier = trim(identifier);
      _template_cache[identifier] = template;
    };

    View.prototype.url = null;

    View.prototype._loaded_url = null;

    View.prototype.__falcon_view__is_loaded__ = false;

    View.prototype.__falcon_view__is_destroyed__ = false;

    View.prototype.__falcon_view__child_views__ = [];

    View.prototype.observables = null;

    function View() {
      var key, url, value, _loaded, _ref,
        _this = this;

      View.__super__.constructor.call(this);
      url = this.makeUrl();
      this.__falcon_view__is_loaded__ = ko.observable(false);
      this.__falcon_view__is_destroyed__ = false;
      this.__falcon_view__child_views__ = [];
      if (isObject(this.observables)) {
        _ref = this.observables;
        for (key in _ref) {
          value = _ref[key];
          if (isFunction(value)) {
            this[key] = ko.computed({
              'read': value,
              'owner': this
            });
          } else if (isObject(value) && ('read' in value || 'write' in value)) {
            this[key] = ko.computed({
              'read': value.read,
              'write': value.write,
              'owner': this
            });
          } else if (isArray(value)) {
            this[key] = ko.observableArray(value);
          } else {
            this[key] = ko.observable(value);
          }
        }
      }
      _loaded = function() {
        _this._loaded_url = url;
        _this.__falcon_view__is_loaded__(true);
        return _this.trigger("load");
      };
      this.initialize.apply(this, arguments);
      if (isEmpty(url) || url in _template_cache) {
        _loaded();
      } else if (startsWith(url, "#")) {
        Falcon.View.cacheTemplate(url, $(url).html());
        _loaded();
      } else {
        $.ajax({
          url: url,
          type: "GET",
          cache: false,
          error: function() {
            console.log("ERROR LOADING TEMPLATE " + url);
            return _this.trigger("error");
          },
          success: function(html) {
            Falcon.View.cacheTemplate(url, html);
            return _loaded();
          }
        });
      }
    }

    View.prototype.makeUrl = function() {
      var url, _ref;

      url = ko.utils.unwrapObservable(this.url);
      if (isFunction(url)) {
        url = url();
      }
      if (!isString(url)) {
        url = "";
      }
      url = trim(url);
      if ((_ref = url.slice(0, 1)) !== "/" && _ref !== "#") {
        url = "/" + url;
      }
      if (isString(Falcon.baseTemplateUrl) && startsWith(url, "/")) {
        url = "" + Falcon.baseTemplateUrl + url;
      }
      return url;
    };

    View.prototype.template = function() {
      var _ref;

      if (!ko.utils.unwrapObservable(this.__falcon_view__is_loaded__)) {
        return "";
      }
      return (_ref = _template_cache[this._loaded_url]) != null ? _ref : "";
    };

    View.prototype.destroy = function() {
      var child_view, _i, _len, _ref;

      if (this.__falcon_view__is_destroyed__) {
        return;
      }
      _ref = this.__falcon_view__child_views__;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child_view = _ref[_i];
        child_view.destroy();
      }
      this.dispose.apply(this, arguments);
      this.__falcon_view__child_views__ = null;
      this.__falcon_view__is_destroyed__ = true;
    };

    View.prototype.initialize = (function() {});

    View.prototype.dispose = (function() {});

    View.prototype.isLoaded = function() {
      return this.__falcon_view__is_loaded__();
    };

    View.prototype.viewModel = function() {
      var key, value, viewModel,
        _this = this;

      viewModel = {
        "__falcon_view__addChildView__": function(view) {
          if (!Falcon.isView(view)) {
            return;
          }
          return _this.__falcon_view__child_views__.push(view);
        }
      };
      for (key in this) {
        value = this[key];
        if (!(!(key in Falcon.View.prototype))) {
          continue;
        }
        if (isFunction(value) && !ko.isObservable(value)) {
          value = (function() {
            var method, _value;

            _value = value;
            method = function() {
              var args;

              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _value.call.apply(_value, [_this].concat(__slice.call(args)));
            };
            method.length = _value.length;
            return method;
          })();
        }
        viewModel[key] = value;
      }
      return viewModel;
    };

    return View;

  })(Falcon.Class);

  Falcon.Collection = (function(_super) {
    var _makeIterator;

    __extends(Collection, _super);

    Collection.prototype._mappings = null;

    Collection.extend = function(definition) {
      return Falcon.Class.extend(Falcon.Collection, definition);
    };

    Collection.prototype.models = null;

    Collection.prototype.model = null;

    Collection.prototype.__change_count__ = 0;

    Collection.prototype.url = null;

    Collection.prototype.length = 0;

    Collection.prototype.parent = null;

    function Collection(models, parent) {
      var _ref, _ref1, _ref2;

      Collection.__super__.constructor.call(this);
      models = ko.utils.unwrapObservable(models);
      parent = ko.utils.unwrapObservable(parent);
      if ((parent == null) && Falcon.isModel(models)) {
        _ref = [models, parent], parent = _ref[0], models = _ref[1];
      }
      if (Falcon.isModel(models) && isArray(parent)) {
        _ref1 = [models, parent], parent = _ref1[0], models = _ref1[1];
      }
      if (this.model != null) {
        if ((_ref2 = this.url) == null) {
          this.url = this.model.prototype.url;
        }
      }
      this.length = ko.observable(0);
      this.parent = parent;
      this._mappings = [];
      this.reset();
      if (!isEmpty(models)) {
        this.fill(models);
      }
      this.initialize(models);
    }

    Collection.prototype.initialize = (function() {});

    Collection.prototype.parse = function(data, options, xhr) {
      return data;
    };

    Collection.prototype.fill = function(items, options) {
      var i, iterator, m, mapping, method, model, models, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _length, _m, _model, _models, _n, _ref;

      if (this.model == null) {
        return this;
      }
      if (items == null) {
        items = [];
      }
      if (Falcon.isCollection(items)) {
        items = items.models();
      }
      if (ko.isObservable(items)) {
        items = ko.utils.unwrapObservable(items);
      }
      if (!isArray(items)) {
        items = [items];
      }
      models = [];
      if (!isObject(options)) {
        options = {};
      }
      method = options.method;
      if (!isString(method)) {
        method = '';
      }
      method = method.toLowerCase();
      if (method !== 'replace' && method !== 'append' && method !== 'prepend' && method !== 'merge') {
        method = 'replace';
      }
      if (method !== 'replace' && isEmpty(items)) {
        return [];
      }
      this.__change_count__++;
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        m = items[i];
        if (Falcon.isModel(m)) {
          if (m instanceof this.model) {
            models[i] = items[i];
            if (this.parent != null) {
              models[i].parent = this.parent;
            }
          } else {
            models[i] = new this.model(m.serialize(), this.parent);
          }
        } else {
          models[i] = new this.model(m, this.parent);
        }
        _ref = this._mappings;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          mapping = _ref[_j];
          models[i].mixin(mapping);
        }
      }
      if (method === 'replace') {
        this.models(models);
      } else if (method === 'merge') {
        _models = this.models();
        for (_k = 0, _len2 = models.length; _k < _len2; _k++) {
          model = models[_k];
          iterator = _makeIterator(model);
          _model = null;
          for (_l = 0, _len3 = _models.length; _l < _len3; _l++) {
            m = _models[_l];
            if (!(iterator(m))) {
              continue;
            }
            _model = m;
            break;
          }
          if (_model) {
            _model.fill(model);
          } else {
            this.models.push(model);
          }
        }
      } else if (method === 'prepend') {
        _length = models.length - 1;
        for (i = _m = 0, _len4 = models.length; _m < _len4; i = ++_m) {
          model = models[i];
          this.models.unshift(models[_length - i]);
        }
      } else if (method === 'append') {
        for (_n = 0, _len5 = models.length; _n < _len5; _n++) {
          model = models[_n];
          this.models.push(model);
        }
      }
      this.length(this.models().length);
      return models;
    };

    Collection.prototype.unwrap = function() {
      var i, raw, value, _ref;

      raw = [];
      _ref = this.models();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    Collection.prototype.serialize = function(fields, deep) {
      var i, raw, value, _ref;

      raw = [];
      _ref = this.models();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.serialize(fields, deep) : value;
      }
      return raw;
    };

    Collection.prototype.makeUrl = function(type) {
      var parentPeriodIndex, parentSlashIndex, parentUrl, url;

      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) {
        url = "";
      }
      url = trim(url);
      if (!isString(type)) {
        type = "";
      }
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      if (!startsWith(url, "/")) {
        url = "/" + url;
      }
      if (Falcon.isModel(this.parent)) {
        parentUrl = this.parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        parentSlashIndex = parentUrl.lastIndexOf("/");
        if (parentSlashIndex < parentPeriodIndex) {
          if (parentPeriodIndex > -1) {
            parentUrl = parentUrl.slice(0, parentPeriodIndex);
          }
          parentUrl = trim(parentUrl);
        }
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      url = url.replace(/([^:])\/\/+/gi, "$1/");
      return url;
    };

    Collection.prototype.sync = function(type, options) {
      var data, json, key, url, value, _ref, _ref1,
        _this = this;

      if (isFunction(options)) {
        options = {
          complete: options
        };
      }
      if (isString(options)) {
        options = {
          fields: trim(options).split(",")
        };
      }
      if (isArray(options)) {
        options = {
          fields: options
        };
      }
      if (!isObject(options)) {
        options = {};
      }
      if (!isObject(options.data)) {
        options.data = {};
      }
      if (!isString(options.dataType)) {
        options.dataType = "json";
      }
      if (!isString(options.contentType)) {
        options.contentType = "application/json";
      }
      if (!isFunction(options.success)) {
        options.success = (function() {});
      }
      if (!isFunction(options.complete)) {
        options.complete = (function() {});
      }
      if (!isFunction(options.error)) {
        options.error = (function() {});
      }
      if (isObject(options.fields)) {
        options.fields = flattenObjectKeys(options.fields);
      }
      if (!isArray(options.fields)) {
        options.fields = [];
      }
      if (!isObject(options.params)) {
        options.params = {};
      }
      if (!isBoolean(options.fill)) {
        options.fill = true;
      }
      if (!isObject(options.headers)) {
        options.headers = {};
      }
      type = trim(isString(type) ? type.toUpperCase() : "GET");
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      data = {};
      if (!isEmpty(options.data)) {
        _ref = options.data;
        for (key in _ref) {
          value = _ref[key];
          data[key] = value;
        }
      }
      json = isEmpty(data) ? "" : JSON.stringify(data);
      url = (_ref1 = options.url) != null ? _ref1 : trim(this.makeUrl(type));
      if (!isEmpty(options.params)) {
        if (!(url.indexOf("?") > -1)) {
          url += "?";
        }
        url += ((function() {
          var _ref2, _results;

          _ref2 = options.params;
          _results = [];
          for (key in _ref2) {
            value = _ref2[key];
            _results.push("" + key + "=" + value);
          }
          return _results;
        })()).join("&");
      }
      return $.ajax({
        'url': url,
        'type': type,
        'data': json,
        'dataType': options.dataType,
        'contentType': options.contentType,
        'cache': Falcon.cache,
        'headers': options.headers,
        'success': function(data, status, xhr) {
          if (isString(data)) {
            data = JSON.parse(data);
          }
          if ((data == null) && isString(xhr.responseText)) {
            data = JSON.parse(xhr.responseText);
          }
          if (data == null) {
            data = [];
          }
          data = _this.parse(data, options, xhr);
          if (type === "GET") {
            if (options.fill) {
              _this.fill(data, options);
            }
            _this.trigger("fetch", data);
          }
          return options.success.call(_this, _this, data, status, xhr);
        },
        'error': function(xhr) {
          var e, response;

          response = xhr.responseText;
          try {
            if (isString(response)) {
              response = JSON.parse(response);
            }
          } catch (_error) {
            e = _error;
          }
          return options.error.call(_this, _this, response, xhr);
        },
        'complete': function(xhr, status) {
          return options.complete.call(_this, _this, xhr, status);
        }
      });
    };

    Collection.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    Collection.prototype.remove = function(items) {
      var removedItems;

      items = ko.utils.unwrapObservable(items);
      if (Falcon.isCollection(items)) {
        items = items.models();
      }
      this.__change_count__++;
      removedItems = isArray(items) ? this.models.removeAll(items) : this.models.remove(items);
      if (!isEmpty(removedItems)) {
        this.length(this.models().length);
      }
      return this;
    };

    Collection.prototype.append = function(items) {
      return this.fill(items, {
        'method': 'append'
      });
    };

    Collection.prototype.prepend = function(items) {
      return this.fill(items, {
        'method': 'prepend'
      });
    };

    Collection.prototype.unshift = function() {
      return this.prepend.apply(this, arguments);
    };

    Collection.prototype.shift = function() {
      var item;

      item = this.models.shift();
      this.length(this.models().length);
      return item;
    };

    Collection.prototype.push = function() {
      return this.append.apply(this, arguments);
    };

    Collection.prototype.pop = function() {
      var item;

      item = this.models.pop();
      this.length(this.models().length);
      return item;
    };

    Collection.prototype.sort = function(sorter) {
      if (!isFunction(sorter)) {
        return models;
      }
      return this.models.sort(sorter);
    };

    Collection.prototype.create = function(data, options) {
      var _success,
        _this = this;

      if (this.model == null) {
        return;
      }
      if (Falcon.isModel(data)) {
        data = data.unwrap();
      }
      if (!isObject(data)) {
        data = {};
      }
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) {
        options = {};
      }
      if (!isFunction(options.success)) {
        options.success = (function() {});
      }
      if (!isString(options.method)) {
        options.method = 'append';
      }
      _success = options.success;
      options.success = function(model) {
        var models, _ref;

        models = _this.fill(model, options);
        return _success.apply((_ref = models[0]) != null ? _ref : model, arguments);
      };
      return new this.model(data, this.parent).create(options);
    };

    Collection.prototype.destroy = function(model, options) {
      var _success,
        _this = this;

      if (this.model == null) {
        return;
      }
      model = this.first(ko.utils.unwrapObservable(model));
      if (!Falcon.isModel(model)) {
        return;
      }
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) {
        options = {};
      }
      if (!isFunction(options.success)) {
        options.success = (function() {});
      }
      options.parent = this.parent;
      _success = options.success;
      options.success = function(model) {
        _this.remove(model);
        return _success.apply(model, arguments);
      };
      return model.destroy(options);
    };

    Collection.prototype.at = function(index) {
      var models;

      index = parseInt(index);
      if (isNaN(index)) {
        return null;
      }
      models = this.models();
      if (index < 0 || index >= models.length) {
        return null;
      }
      return models[index];
    };

    Collection.prototype.each = function(iterator, context) {
      var index, item, _i, _j, _len, _len1, _ref, _ref1;

      if (!isFunction(iterator)) {
        return this;
      }
      if (context == null) {
        context = this;
      }
      if (iterator.length === 1) {
        _ref = this.models();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          iterator.call(context, item);
        }
      } else {
        _ref1 = this.models();
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          item = _ref1[index];
          iterator.call(context, index, item);
        }
      }
      return this;
    };

    _makeIterator = function(iterator) {
      var _id, _model;

      if (Falcon.isModel(iterator)) {
        _model = iterator;
        return function(item) {
          var id, model_id;

          if (!Falcon.isModel(item)) {
            return false;
          }
          id = item.get('id');
          model_id = _model.get('id');
          return id === model_id;
        };
      }
      if (isNumber(iterator) || isString(iterator)) {
        _id = iterator;
        return function(model) {
          if (!Falcon.isModel(model)) {
            return false;
          }
          return model.get("id") === _id;
        };
      }
      return iterator;
    };

    Collection.prototype.first = function(iterator) {
      var item, _i, _len, _ref;

      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        iterator = (function() {
          return true;
        });
      }
      _ref = this.models();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (iterator(item)) {
          return item;
        }
      }
      return null;
    };

    Collection.prototype.last = function(iterator) {
      var index, item, length, models, _i, _len;

      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        iterator = (function() {
          return true;
        });
      }
      models = this.models();
      length = models.length;
      for (index = _i = 0, _len = models.length; _i < _len; index = ++_i) {
        item = models[index];
        item = models[length - index - 1];
        if (iterator(item)) {
          return item;
        }
      }
      return null;
    };

    Collection.prototype.all = function(iterator) {
      var item;

      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        return this.models();
      }
      return (function() {
        var _i, _len, _ref, _results;

        _ref = this.models();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (iterator(item)) {
            _results.push(item);
          }
        }
        return _results;
      }).call(this);
    };

    Collection.prototype.any = function(iterator) {
      var item, _i, _len, _ref;

      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        return false;
      }
      _ref = this.models();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (iterator(item)) {
          return true;
        }
      }
      return false;
    };

    Collection.prototype.without = function(iterator) {
      var item;

      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        return this.models();
      }
      return (function() {
        var _i, _len, _ref, _results;

        _ref = this.models();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!iterator(item)) {
            _results.push(item);
          }
        }
        return _results;
      }).call(this);
    };

    Collection.prototype.pluck = function(attribute, unwrap) {
      var model, models, plucked_values, _i, _len;

      if (!isString(attribute)) {
        attribute = "";
      }
      if (!isBoolean(unwrap)) {
        unwrap = true;
      }
      plucked_values = [];
      models = this.models();
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        if (model != null) {
          plucked_values.push(unwrap ? ko.utils.unwrapObservable(model[attribute]) : model[attribute]);
        } else {
          plucked_values.push(void 0);
        }
      }
      return plucked_values;
    };

    Collection.prototype.slice = function(start, end) {
      return this.models.slice(start, end);
    };

    Collection.prototype.mixin = function(mapping) {
      var key, model, models, value, _i, _len, _mapping,
        _this = this;

      if (!isObject(mapping)) {
        mapping = {};
      }
      _mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (ko.isObservable(value)) {
          _mapping[key] = ko.observable(ko.utils.unwrapObservable(value));
        } else if (isFunction(value)) {
          (function() {
            var _value;

            _value = value;
            _mapping[key] = function() {
              var args;

              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _value.apply(args[0], [args[0], _this].concat(args.slice(1)));
            };
            return _mapping[key].length = _value.length;
          })();
        } else {
          _mapping[key] = value;
        }
      }
      models = this.models();
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        if (Falcon.isDataObject(model)) {
          model.mixin(_mapping);
        }
      }
      this._mappings.push(_mapping);
      return this;
    };

    Collection.prototype.clone = function(parent) {
      parent = parent === null || Falcon.isModel(parent) ? parent : this.parent;
      return new this.constructor(this.models(), parent);
    };

    Collection.prototype.copy = function(fields, parent) {
      if (fields === null || Falcon.isModel(fields)) {
        parent = fields;
      }
      if (!isArray(fields)) {
        fields = ["id"];
      }
      if (!(parent === null || Falcon.isModel(parent))) {
        parent = this.parent;
      }
      return new this.constructor(this.serialize(fields), parent);
    };

    Collection.prototype.reset = function() {
      this.__change_count__ += 1;
      if (this.models != null) {
        this.models([]);
      } else {
        this.models = ko.observableArray([]);
        this.models.extend({
          "throttle": 1
        });
      }
      this.length(0);
      return this;
    };

    return Collection;

  })(Falcon.Class);

  Falcon.Event = (function() {
    Event.UP_KEY = 38;

    Event.DOWN_KEY = 40;

    Event.RIGHT_KEY = 39;

    Event.LEFT_KEY = 37;

    Event.ENTER_KEY = 13;

    Event.prototype._element = null;

    /*
    	# Method: Falcon.Event()
    */


    function Event(element) {
      if (element == null) {
        throw new Error("Element must be given");
      }
      this._element = $(element);
    }

    /*
    	# Method: Falcon.Event#on()
    */


    Event.prototype.on = function(event, callback) {
      var element, _callback;

      if (!isString(event)) {
        event = "";
      }
      element = this._element;
      if (!isFunction(callback)) {
        callback = (function() {});
      }
      event = trim(event);
      if (isEmpty(event)) {
        return;
      }
      _callback = function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (element.parents('body').length > 0) {
          return callback.call.apply(callback, [this].concat(__slice.call(args)));
        } else {
          return $window.off(event, _callback);
        }
      };
      return $window.on(event, _callback);
    };

    return Event;

  })();

  ko.bindingHandlers['view'] = (function() {
    var getTemplate, getViewModel, makeTemplateValueAccessor, returnVal;

    makeTemplateValueAccessor = function(viewModel) {
      return function() {
        return {
          'data': viewModel,
          'templateEngine': ko.nativeTemplateEngine.instance
        };
      };
    };
    getViewModel = function(value) {
      var viewModel, _ref;

      viewModel = {};
      if (value == null) {
        value = {};
      }
      if (value instanceof Falcon.View) {
        viewModel = value.viewModel();
      } else {
        viewModel = ko.utils.unwrapObservable((_ref = value.viewModel) != null ? _ref : {});
      }
      return viewModel;
    };
    getTemplate = function(value) {
      var template, _ref;

      template = "";
      if (value == null) {
        value = {};
      }
      if (value instanceof Falcon.View) {
        template = value.template();
      } else {
        template = ko.utils.unwrapObservable((_ref = value.template) != null ? _ref : "");
      }
      return template;
    };
    returnVal = {
      controlsDescendantBindings: true
    };
    return {
      'init': function(element, valueAccessor, allBindingsAccessor, viewModel, context) {
        var oldViewModel, subscription, value;

        value = valueAccessor();
        if ((value != null) && ko.isSubscribable(value)) {
          oldViewModel = ko.utils.unwrapObservable(value);
          subscription = value.subscribe(function(newViewModel) {
            if (Falcon.isView(oldViewModel)) {
              oldViewModel.destroy();
            }
            return oldViewModel = newViewModel;
          });
          ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
            if (Falcon.isView(oldViewModel)) {
              oldViewModel.destroy();
            }
            return subscription.dispose();
          });
        } else if (Falcon.isView(value)) {
          ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
            return value.destroy();
          });
        }
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        ko.bindingHandlers['template']['init'](element, makeTemplateValueAccessor(viewModel), allBindingsAccessor, viewModel, context);
        return returnVal;
      },
      'update': function(element, valueAccessor, allBindingsAccessor, viewModel, context) {
        var anonymousTemplate, execScripts, originalViewContext, template, value, _ref;

        value = valueAccessor();
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        template = getTemplate(value);
        if (!isObject(value)) {
          return returnVal;
        }
        originalViewContext = context['$view'];
        context['$view'] = viewModel;
        if (Falcon.isView(originalViewContext)) {
          originalViewContent['__falcon_view__addChildView__'](value);
        }
        if (isEmpty(viewModel) || isEmpty(template)) {
          $(element).empty();
        } else if (!(value instanceof Falcon.View) || ko.utils.unwrapObservable(value.__falcon_view__is_loaded__)) {
          anonymousTemplate = ko.utils.domData.get(element, '__ko_anon_template__');
          if (((_ref = anonymousTemplate.containerData) != null ? _ref.innerHTML : void 0) != null) {
            anonymousTemplate.containerData.innerHTML = template;
          } else {
            anonymousTemplate.textData = template;
          }
          ko.bindingHandlers['template']['update'](element, makeTemplateValueAccessor(viewModel), allBindingsAccessor, viewModel, context);
          execScripts = !!ko.utils.unwrapObservable(value.execScripts);
          if (template !== anonymousTemplate && execScripts === true) {
            $(element).find("script").each(function(index, script) {
              script = $(script);
              if (script.attr('type').toLowerCase() === "text/javascript") {
                return eval(script.text());
              }
            });
          }
        }
        if (Falcon.isView(value)) {
          value.trigger("render");
        }
        context['$view'] = originalViewContext;
        return returnVal;
      }
    };
  })();

  _getItems = function(value) {
    var items;

    items = ko.utils.unwrapObservable(Falcon.isCollection(value) ? value.models() : value);
    if (!isArray(items)) {
      items = [items];
    }
    return (function() {
      return items;
    });
  };

  _shouldUpdate = function(element, value) {
    var changeCount, lastChangeCount;

    if (!Falcon.isCollection(value)) {
      return true;
    }
    changeCount = value.__change_count__;
    lastChangeCount = ko.utils.domData.get(element, "__falcon_collection___change_count__");
    if (lastChangeCount === changeCount) {
      return false;
    }
    ko.utils.domData.set(element, '__falcon_collection___change_count__', changeCount);
    return true;
  };

  _foreach = (_ref = ko.bindingHandlers['foreach']) != null ? _ref : (function() {});

  ko.bindingHandlers['foreach'] = {
    'init': function() {
      var args, element, value, valueAccessor, _ref1;

      element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      value = ko.utils.unwrapObservable(valueAccessor());
      ko.utils.domData.set(element, '__falcon_collection___change_count__', -1);
      return ((_ref1 = _foreach['init']) != null ? _ref1 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
    },
    'update': function() {
      var args, element, value, valueAccessor, _ref1;

      element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      value = ko.utils.unwrapObservable(valueAccessor());
      if (_shouldUpdate(element, value)) {
        return ((_ref1 = _foreach['update']) != null ? _ref1 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
      }
      if (Falcon.isCollection(value)) {
        value.trigger("render");
      }
    }
  };

  for (key in _foreach) {
    value = _foreach[key];
    if (!(key in ko.bindingHandlers['foreach'])) {
      ko.bindingHandlers['foreach'][key] = value;
    }
  }

  _options = (_ref1 = ko.bindingHandlers['options']) != null ? _ref1 : (function() {});

  ko.bindingHandlers['options'] = (function() {
    return {
      'init': function() {
        var args, element, valueAccessor, _ref2;

        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        ko.utils.domData.set(element, '__falcon_collection___change_count__', -1);
        return ((_ref2 = _options['init']) != null ? _ref2 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
      },
      'update': function() {
        var args, element, valueAccessor, _ref2;

        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        if (_shouldUpdate(element, value)) {
          return ((_ref2 = _options['update']) != null ? _ref2 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
        }
        if (Falcon.isCollection(value)) {
          value.trigger("render");
        }
      }
    };
  })();

  ko.bindingHandlers['log'] = {
    update: function(element, valueAccessor) {
      return console.log(ko.utils.unwrapObservable(valueAccessor()));
    }
  };

  _bindingContext = ko.bindingContext;

  ko.bindingContext = function(dataItem, parentBindingContext) {
    if ((this['$view'] == null) && (parentBindingContext != null)) {
      this['$view'] = parentBindingContext['$view'] || parentBindingContext['$root'];
    }
    return _bindingContext.call(this, dataItem, parentBindingContext);
  };

  ko.bindingContext.prototype = _bindingContext.prototype;

  ko.virtualElements.allowedBindings['view'] = true;

  ko.virtualElements.allowedBindings['log'] = true;

  ko.virtualElements.allowedBindings['collection'] = true;

  ko.subscribable.fn.classify = function() {
    var extenders, identifier, identifiers, _i, _len;

    identifiers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    extenders = {};
    for (_i = 0, _len = identifiers.length; _i < _len; _i++) {
      identifier = identifiers[_i];
      if (!(isString(identifier) && !isEmpty(trim(identifier)))) {
        continue;
      }
      identifier = trim(identifier);
      extenders[identifier] = true;
    }
    return this.extend(extenders);
  };

}).call(this);
